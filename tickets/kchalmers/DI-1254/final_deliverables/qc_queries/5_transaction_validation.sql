/*
================================================================================
DI-1254 QC: Transaction File Validation
================================================================================
*/

USE WAREHOUSE BUSINESS_INTELLIGENCE_LARGE;
USE ROLE BUSINESS_INTELLIGENCE;

--5.1: Duplicate Transaction ID Check - Should Return 0 Rows
SELECT
    COUNT(*) AS ROW_COUNT,
    TRANSACTION_ID,
    LOANID
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025_TRANSACTIONS
GROUP BY TRANSACTION_ID, LOANID
HAVING COUNT(*) > 1
ORDER BY ROW_COUNT DESC;

--5.2: Transaction Type Distribution
SELECT
    LOAN_TRANSACTION_TYPE,
    COUNT(*) AS TRANSACTION_COUNT,
    SUM(LOAN_TRANSACTION_AMOUNT) AS TOTAL_AMOUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025_TRANSACTIONS
GROUP BY LOAN_TRANSACTION_TYPE
ORDER BY TRANSACTION_COUNT DESC;

--5.3: Loans in Population vs Transactions - Should Match
SELECT
    'Loans in Population' AS SOURCE,
    COUNT(DISTINCT LOANID) AS LOAN_COUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025

UNION ALL

SELECT
    'Loans in Transactions' AS SOURCE,
    COUNT(DISTINCT LOANID) AS LOAN_COUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025_TRANSACTIONS;

--5.4: Loans Without Transactions (Potential Data Quality Issue)
SELECT
    pop.LOANID,
    pop.LEAD_GUID,
    pop.CHARGEOFFDATE,
    pop.UNPAIDBALANCEDUE
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025 pop
LEFT JOIN BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025_TRANSACTIONS txn
    ON pop.LOANID = txn.LOANID
WHERE txn.LOANID IS NULL;

--5.5: Post-Chargeoff Event Distribution
SELECT
    POSTCHARGEOFFEVENT,
    LOAN_TRANSACTION_TYPE,
    COUNT(*) AS TRANSACTION_COUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025_TRANSACTIONS
GROUP BY POSTCHARGEOFFEVENT, LOAN_TRANSACTION_TYPE
ORDER BY POSTCHARGEOFFEVENT, TRANSACTION_COUNT DESC;
