/*
================================================================================
DI-1254 QC: Bankruptcy Status Distribution
================================================================================
*/

USE WAREHOUSE BUSINESS_INTELLIGENCE_LARGE;
USE ROLE BUSINESS_INTELLIGENCE;

--3.1: Bankruptcy Chapter Distribution
SELECT
    BANKRUPTCYCHAPTER,
    COUNT(*) AS LOAN_COUNT,
    SUM(UNPAIDBALANCEDUE) AS TOTAL_UNPAID_BALANCE,
    AVG(UNPAIDBALANCEDUE) AS AVG_UNPAID_BALANCE
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025
GROUP BY BANKRUPTCYCHAPTER
ORDER BY LOAN_COUNT DESC;

--3.2: Bankruptcy Status Distribution
SELECT
    BANKRUPTCY_STATUS,
    COUNT(*) AS LOAN_COUNT,
    SUM(UNPAIDBALANCEDUE) AS TOTAL_UNPAID_BALANCE
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025
GROUP BY BANKRUPTCY_STATUS
ORDER BY LOAN_COUNT DESC;

--3.3: POC (Proof of Claim) Analysis
SELECT
    'POC Required' AS METRIC,
    POC_REQUIRED,
    COUNT(*) AS LOAN_COUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025
WHERE BANKRUPTCY_STATUS IS NOT NULL
GROUP BY POC_REQUIRED

UNION ALL

SELECT
    'POC Filed' AS METRIC,
    IFF(POC_COMPLETED_DATE IS NOT NULL, 'Yes', 'No') AS POC_STATUS,
    COUNT(*) AS LOAN_COUNT
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025
WHERE BANKRUPTCY_STATUS IS NOT NULL
GROUP BY POC_STATUS

ORDER BY METRIC, POC_REQUIRED;

--3.4: Loans With and Without Bankruptcy Info
SELECT
    CASE
        WHEN BANKRUPTCY_STATUS IS NOT NULL THEN 'Has Bankruptcy'
        ELSE 'No Bankruptcy'
    END AS BK_STATUS,
    COUNT(*) AS LOAN_COUNT,
    SUM(UNPAIDBALANCEDUE) AS TOTAL_UNPAID_BALANCE
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.RESURGENT_BK_SALE_EVAL_2025
GROUP BY 1;
