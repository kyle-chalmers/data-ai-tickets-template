/*
================================================================================
DI-1320: Summary Analysis Queries - Comprehensive Breakdown
================================================================================

Analysis Structure:
1. Overall population summary
2. Debt settlement breakdown (Y vs N)
3. Non-settlement loans (HAS_DEBT_SETTLEMENT_DATA = 'N') detailed analysis:
   - By IMPACT_CATEGORY
   - By LP_CURRENT_STATUS
   - By PLACEMENT_STATUS
   - By AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
   - Cross-tabulations

Run this entire file to create temp table and generate all summaries.
================================================================================
*/

-- Set schema for temp table
USE SCHEMA BUSINESS_INTELLIGENCE.ANALYTICS;

-- ============================================================================
-- Create temp table with final results (replicates main query logic)
-- ============================================================================
CREATE OR REPLACE TEMP TABLE temp_autopay_analysis AS
WITH charged_off_loans AS (
    SELECT
        LOANID,
        STATUS,
        CHARGEOFFDATE,
        PRINCIPALBALANCEATCHARGEOFF,
        PLACEMENT_STATUS,
        PLACEMENT_STATUS_STARTDATE,
        RECOVERIESPAIDTODATE,
        LASTPAYMENTDATE,
        LASTPAYMENTAMOUNT
    FROM DATA_STORE.MVW_LOAN_TAPE
    WHERE CHARGEOFFDATE IS NOT NULL
),

loan_identifiers AS (
    SELECT
        CAST(LOAN_ID AS VARCHAR) AS LOAN_ID,
        LEGACY_LOAN_ID,
        LEAD_GUID
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN
),

autopay_status AS (
    SELECT
        CAST(LOAN_ID AS VARCHAR) AS LOAN_ID,
        PAYMENT_MODE,
        PAYMENT_MODE_START_DATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_PAYMENT_MODE
    WHERE PAYMENT_MODE_END_DATE IS NULL
        AND PAYMENT_MODE = 'Auto Payer'
),

loan_current_status AS (
    SELECT
        A.LOAN_ID::VARCHAR AS LOAN_ID,
        B.TITLE AS LP_CURRENT_STATUS,
        A.LOAN_SUB_STATUS_ID
    FROM BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT A
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT B
        ON A.LOAN_SUB_STATUS_ID = B.ID
        AND B.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LMS_SCHEMA()
    WHERE A.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LMS_SCHEMA()
        AND A.DELETED = 0
),

debt_settlement AS (
    SELECT
        CAST(LOAN_ID AS VARCHAR) AS LOAN_ID,
        SETTLEMENTSTATUS,
        SETTLEMENT_PORTFOLIOS,
        DATA_SOURCE_LIST AS DEBT_SETTLEMENT_DATA_SOURCE_LIST,
        SETTLEMENT_START_DATE,
        SETTLEMENT_COMPLETION_DATE,
        CASE
            WHEN LOAN_ID IS NOT NULL THEN 'Y'
            ELSE 'N'
        END AS HAS_DEBT_SETTLEMENT_DATA
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_DEBT_SETTLEMENT
),

post_chargeoff_payments AS (
    SELECT
        CAST(PT.LOAN_ID AS VARCHAR) AS LOAN_ID,
        COUNT(PT.PAYMENT_ID) AS TOTAL_PAYMENT_ATTEMPTS,
        COUNT(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 1
            THEN PT.PAYMENT_ID
        END) AS ACTIVE_SETTLED_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 1
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS ACTIVE_SETTLED_PAYMENT_AMOUNT,
        COUNT(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 0
            THEN PT.PAYMENT_ID
        END) AS ACTIVE_NOT_SETTLED_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 0
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS ACTIVE_NOT_SETTLED_PAYMENT_AMOUNT,
        COUNT(CASE
            WHEN PT.IS_REVERSED = 1 OR PT.IS_REJECTED = 1
            THEN PT.PAYMENT_ID
        END) AS FAILED_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_REVERSED = 1 OR PT.IS_REJECTED = 1
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS FAILED_PAYMENT_AMOUNT,
        MIN(PT.APPLY_DATE) AS FIRST_PAYMENT_ATTEMPT_DATE,
        MAX(PT.APPLY_DATE) AS LAST_PAYMENT_ATTEMPT_DATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LP_PAYMENT_TRANSACTION PT
    INNER JOIN charged_off_loans COL
        ON PT.LOANID = COL.LOANID
    WHERE PT.APPLY_DATE > COL.CHARGEOFFDATE
    AND PT.IS_WAIVER = 0
    GROUP BY PT.LOAN_ID
),

post_lp_chargeoff_payments AS (
    SELECT
        CAST(PT.LOAN_ID AS VARCHAR) AS LOAN_ID,
        COUNT(PT.PAYMENT_ID) AS TOTAL_LP_PAYMENT_ATTEMPTS,
        COUNT(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 1
            THEN PT.PAYMENT_ID
        END) AS ACTIVE_SETTLED_LP_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 1
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS ACTIVE_SETTLED_LP_PAYMENT_AMOUNT,
        COUNT(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 0
            THEN PT.PAYMENT_ID
        END) AS ACTIVE_NOT_SETTLED_LP_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_ACTIVE = 1 AND PT.IS_REVERSED = 0 AND PT.IS_SETTLED = 0
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS ACTIVE_NOT_SETTLED_LP_PAYMENT_AMOUNT,
        COUNT(CASE
            WHEN PT.IS_REVERSED = 1 OR PT.IS_REJECTED = 1
            THEN PT.PAYMENT_ID
        END) AS FAILED_LP_PAYMENT_COUNT,
        SUM(CASE
            WHEN PT.IS_REVERSED = 1 OR PT.IS_REJECTED = 1
            THEN PT.PAYMENT_AMOUNT
            ELSE 0
        END) AS FAILED_LP_PAYMENT_AMOUNT,
        MIN(PT.APPLY_DATE) AS FIRST_LP_PAYMENT_ATTEMPT_DATE,
        MAX(PT.APPLY_DATE) AS LAST_LP_PAYMENT_ATTEMPT_DATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LP_PAYMENT_TRANSACTION PT
    INNER JOIN charged_off_loans COL
        ON PT.LOANID = COL.LOANID
    WHERE PT.APPLY_DATE > COL.CHARGEOFFDATE
        AND CLS_TRANSACTION_DATE IS NULL
        AND PT.IS_WAIVER = 0
    GROUP BY PT.LOAN_ID
),

final_results AS (
    SELECT
        LI.LOAN_ID,
        COL.LOANID AS LEGACY_LOAN_ID,
        LI.LEAD_GUID,
        COL.CHARGEOFFDATE,
        COL.PRINCIPALBALANCEATCHARGEOFF,
        COL.PLACEMENT_STATUS,
        COL.PLACEMENT_STATUS_STARTDATE,
        AP.PAYMENT_MODE,
        AP.PAYMENT_MODE_START_DATE,
        CASE
            WHEN AP.PAYMENT_MODE IS NOT NULL THEN 'Y'
            ELSE 'N'
        END AS CURRENTLY_HAS_AUTOPAY,
        CASE
            WHEN AP.PAYMENT_MODE_START_DATE <= COL.CHARGEOFFDATE
            THEN 'Y'
            WHEN AP.PAYMENT_MODE_START_DATE > COL.CHARGEOFFDATE
            THEN 'N'
            ELSE NULL
        END AS AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
        COALESCE(PCP.TOTAL_LP_PAYMENT_ATTEMPTS, 0) AS TOTAL_LP_PAYMENT_ATTEMPTS,
        COALESCE(PCP.ACTIVE_SETTLED_LP_PAYMENT_COUNT, 0) AS ACTIVE_SETTLED_LP_PAYMENTS,
        COALESCE(PCP.ACTIVE_SETTLED_LP_PAYMENT_AMOUNT, 0) AS ACTIVE_SETTLED_LP_PAYMENT_AMOUNT,
        COALESCE(PCP.ACTIVE_NOT_SETTLED_LP_PAYMENT_COUNT, 0) AS ACTIVE_NOT_SETTLED_LP_PAYMENTS,
        COALESCE(PCP.ACTIVE_NOT_SETTLED_LP_PAYMENT_AMOUNT, 0) AS ACTIVE_NOT_SETTLED_LP_PAYMENT_AMOUNT,
        COALESCE(PCP.FAILED_LP_PAYMENT_COUNT, 0) AS FAILED_LP_PAYMENTS,
        COALESCE(PCP.FAILED_LP_PAYMENT_AMOUNT, 0) AS FAILED_LP_PAYMENT_AMOUNT,
        PCP.FIRST_LP_PAYMENT_ATTEMPT_DATE,
        PCP.LAST_LP_PAYMENT_ATTEMPT_DATE,
        LCS.LP_CURRENT_STATUS,
        DS.SETTLEMENTSTATUS,
        DS.SETTLEMENT_PORTFOLIOS,
        DS.DEBT_SETTLEMENT_DATA_SOURCE_LIST,
        COALESCE(DS.HAS_DEBT_SETTLEMENT_DATA, 'N') AS HAS_DEBT_SETTLEMENT_DATA,
        COL.RECOVERIESPAIDTODATE,
        COL.LASTPAYMENTDATE,
        COL.LASTPAYMENTAMOUNT,
        CASE
            WHEN AP.PAYMENT_MODE_START_DATE IS NULL THEN NULL
            WHEN PCP.FIRST_LP_PAYMENT_ATTEMPT_DATE IS NULL THEN NULL
            WHEN PCP.FIRST_LP_PAYMENT_ATTEMPT_DATE > AP.PAYMENT_MODE_START_DATE THEN 'Y'
            ELSE 'N'
        END AS LP_PAYMENTS_AFTER_AUTOPAY_START,
        CASE
            WHEN COL.PLACEMENT_STATUS_STARTDATE IS NULL THEN NULL
            WHEN PCP.LAST_LP_PAYMENT_ATTEMPT_DATE IS NULL THEN NULL
            WHEN PCP.LAST_LP_PAYMENT_ATTEMPT_DATE > COL.PLACEMENT_STATUS_STARTDATE THEN 'Y'
            ELSE 'N'
        END AS LATEST_LP_PAYMENT_AFTER_PLACEMENT,
        CASE
            WHEN COALESCE(COL.RECOVERIESPAIDTODATE, 0) = 0
                 AND COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_AMOUNT, 0) = 0 THEN 'MATCH'
            WHEN ABS(COALESCE(COL.RECOVERIESPAIDTODATE, 0) - COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_AMOUNT, 0)) < 0.01 THEN 'MATCH'
            WHEN COALESCE(COL.RECOVERIESPAIDTODATE, 0) > COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_AMOUNT, 0) THEN 'TAPE_HIGHER'
            WHEN COALESCE(COL.RECOVERIESPAIDTODATE, 0) < COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_AMOUNT, 0) THEN 'PAYMENTS_HIGHER'
            ELSE 'UNKNOWN'
        END AS RECOVERY_RECONCILIATION_FLAG,
        COALESCE(COL.RECOVERIESPAIDTODATE, 0) - COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_AMOUNT, 0) AS RECOVERY_AMOUNT_DIFFERENCE,
        CASE
            WHEN AP.PAYMENT_MODE IS NULL
            THEN 'NO_AUTOPAY_CURRENTLY'

            WHEN COALESCE(PCPCLS.TOTAL_PAYMENT_ATTEMPTS, 0) = 0
            THEN 'AUTOPAY_ACTIVE_NO_PAYMENTS'
            WHEN COALESCE(PCP.TOTAL_LP_PAYMENT_ATTEMPTS, 0) = 0
            THEN 'AUTOPAY_ACTIVE_NO_PAYMENTS_IN_LOANPRO'
            -- Settled payments collected
            WHEN COALESCE(PCP.ACTIVE_SETTLED_LP_PAYMENT_COUNT, 0) > 0
            THEN 'AUTOPAY_ACTIVE_PAYMENTS_COLLECTED_IN_LOANPRO'
            WHEN COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_COUNT, 0) > 0
                AND COALESCE(PCP.ACTIVE_SETTLED_LP_PAYMENT_COUNT, 0) = 0
            THEN 'AUTOPAY_ACTIVE_WITH_PAYMENTS_COLLECTED_PRIOR_TO_LOANPRO'
            -- Failed attempts only (no settled)
            WHEN COALESCE(PCP.ACTIVE_SETTLED_LP_PAYMENT_COUNT, 0) = 0
                 AND COALESCE(PCP.FAILED_LP_PAYMENT_COUNT, 0) > 0
            THEN 'AUTOPAY_ACTIVE_FAILED_ATTEMPTS_IN_LOANPRO'
            WHEN COALESCE(PCPCLS.ACTIVE_SETTLED_PAYMENT_COUNT, 0) = 0
                 AND COALESCE(PCP.FAILED_LP_PAYMENT_COUNT, 0) = 0
                 AND COALESCE(PCPCLS.FAILED_PAYMENT_COUNT, 0) > 0
            THEN 'AUTOPAY_ACTIVE_FAILED_ATTEMPTS_PRIOR_TO_LOANPRO'
            -- Active but not settled payments (pending settlement)
            WHEN COALESCE(PCP.ACTIVE_NOT_SETTLED_LP_PAYMENT_COUNT, 0) > 0
            THEN 'AUTOPAY_ACTIVE_PAYMENTS_NOT_YET_SETTLED'

            ELSE 'UNKNOWN'
        END AS IMPACT_CATEGORY
    FROM charged_off_loans COL
    INNER JOIN loan_identifiers LI ON COL.LOANID = LI.LEGACY_LOAN_ID
    LEFT JOIN autopay_status AP ON LI.LOAN_ID = AP.LOAN_ID
    LEFT JOIN post_lp_chargeoff_payments PCP ON LI.LOAN_ID = PCP.LOAN_ID
    LEFT JOIN post_chargeoff_payments PCPCLS ON LI.LOAN_ID = PCPCLS.LOAN_ID
    LEFT JOIN loan_current_status LCS ON LI.LOAN_ID = LCS.LOAN_ID
    LEFT JOIN debt_settlement DS ON LI.LOAN_ID = DS.LOAN_ID
)
SELECT * FROM final_results
WHERE CURRENTLY_HAS_AUTOPAY = 'Y';

-- ============================================================================
-- SUMMARY QUERIES
-- ============================================================================

-- 1: Overall Population Summary
SELECT
    '1: OVERALL POPULATION' AS ANALYSIS_SECTION,
    COUNT(*) AS TOTAL_LOANS,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    SUM(FAILED_LP_PAYMENT_AMOUNT) AS TOTAL_FAILED_AMOUNT,
    COUNT(DISTINCT IMPACT_CATEGORY) AS DISTINCT_CATEGORIES
FROM temp_autopay_analysis;

-- 2: Debt Settlement Breakdown (Y vs N)
SELECT
    '2: DEBT SETTLEMENT BREAKDOWN' AS ANALYSIS_SECTION,
    HAS_DEBT_SETTLEMENT_DATA,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_TOTAL,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
GROUP BY HAS_DEBT_SETTLEMENT_DATA
ORDER BY HAS_DEBT_SETTLEMENT_DATA DESC;

-- 3: Non-Settlement Loans by IMPACT_CATEGORY
SELECT
    '3: NON-SETTLEMENT BY IMPACT_CATEGORY' AS ANALYSIS_SECTION,
    IMPACT_CATEGORY,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_NON_SETTLEMENT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    SUM(FAILED_LP_PAYMENT_AMOUNT) AS TOTAL_FAILED_AMOUNT,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENTS), 2) AS AVG_SETTLED_PAYMENTS_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY IMPACT_CATEGORY
ORDER BY LOAN_COUNT DESC;

-- 4: Non-Settlement Loans by LP_CURRENT_STATUS
SELECT
    '4: NON-SETTLEMENT BY LP_CURRENT_STATUS' AS ANALYSIS_SECTION,
    LP_CURRENT_STATUS,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_NON_SETTLEMENT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY LP_CURRENT_STATUS
ORDER BY LOAN_COUNT DESC;

-- 5: Non-Settlement Loans by PLACEMENT_STATUS
SELECT
    '5: NON-SETTLEMENT BY PLACEMENT_STATUS' AS ANALYSIS_SECTION,
    PLACEMENT_STATUS,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_NON_SETTLEMENT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY PLACEMENT_STATUS
ORDER BY LOAN_COUNT DESC;

-- 6: Non-Settlement Loans by AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
SELECT
    '6: NON-SETTLEMENT BY AUTOPAY_TIMING' AS ANALYSIS_SECTION,
    AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_NON_SETTLEMENT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
ORDER BY AUTOPAY_WAS_ON_BEFORE_CHARGEOFF;

-- 7: Cross-Tab - LP_CURRENT_STATUS × PLACEMENT_STATUS (Non-Settlement)
SELECT
    '7: CROSS-TAB LP_STATUS × PLACEMENT' AS ANALYSIS_SECTION,
    LP_CURRENT_STATUS,
    PLACEMENT_STATUS,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY LP_CURRENT_STATUS, PLACEMENT_STATUS
ORDER BY LOAN_COUNT DESC
LIMIT 15;

-- 8: Cross-Tab - LP_CURRENT_STATUS × IMPACT_CATEGORY (Non-Settlement)
SELECT
    '8: CROSS-TAB LP_STATUS × IMPACT' AS ANALYSIS_SECTION,
    LP_CURRENT_STATUS,
    IMPACT_CATEGORY,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY LP_CURRENT_STATUS, IMPACT_CATEGORY
ORDER BY LOAN_COUNT DESC;

-- 9: Cross-Tab - PLACEMENT_STATUS × AUTOPAY_WAS_ON_BEFORE_CHARGEOFF (Non-Settlement)
SELECT
    '9: CROSS-TAB PLACEMENT × AUTOPAY_TIMING' AS ANALYSIS_SECTION,
    PLACEMENT_STATUS,
    AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY PLACEMENT_STATUS, AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
ORDER BY LOAN_COUNT DESC;

-- 10: Cross-Tab - IMPACT_CATEGORY × AUTOPAY_WAS_ON_BEFORE_CHARGEOFF (Non-Settlement)
SELECT
    '10: CROSS-TAB IMPACT × AUTOPAY_TIMING' AS ANALYSIS_SECTION,
    IMPACT_CATEGORY,
    AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY IMPACT_CATEGORY, AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
ORDER BY LOAN_COUNT DESC;

-- 11: Detailed Analysis of "NO_PAYMENTS_IN_LOANPRO" Category
SELECT
    '11: NO_PAYMENTS_IN_LOANPRO DETAIL' AS ANALYSIS_SECTION,
    LP_CURRENT_STATUS,
    PLACEMENT_STATUS,
    AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
    COUNT(*) AS LOAN_COUNT
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
    AND IMPACT_CATEGORY = 'AUTOPAY_ACTIVE_NO_PAYMENTS_IN_LOANPRO'
GROUP BY LP_CURRENT_STATUS, PLACEMENT_STATUS, AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
ORDER BY LOAN_COUNT DESC
LIMIT 20;

-- 12: 3-Way Cross-Tab - PLACEMENT_STATUS × IMPACT_CATEGORY × AUTOPAY_TIMING (Non-Settlement with Collections)
SELECT
    '12: 3-WAY PLACEMENT × IMPACT × TIMING (WITH COLLECTIONS)' AS ANALYSIS_SECTION,
    PLACEMENT_STATUS,
    IMPACT_CATEGORY,
    AUTOPAY_WAS_ON_BEFORE_CHARGEOFF,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
    AND ACTIVE_SETTLED_LP_PAYMENT_AMOUNT > 0
GROUP BY PLACEMENT_STATUS, IMPACT_CATEGORY, AUTOPAY_WAS_ON_BEFORE_CHARGEOFF
ORDER BY TOTAL_SETTLED_COLLECTED DESC
LIMIT 20;

-- 13: Latest LP Payment After Placement Analysis (Non-Settlement)
SELECT
    '13: LATEST_LP_PAYMENT_AFTER_PLACEMENT BREAKDOWN' AS ANALYSIS_SECTION,
    LATEST_LP_PAYMENT_AFTER_PLACEMENT,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_NON_SETTLEMENT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
GROUP BY LATEST_LP_PAYMENT_AFTER_PLACEMENT
ORDER BY LATEST_LP_PAYMENT_AFTER_PLACEMENT;

-- 14: Latest LP Payment After Placement × Impact Category (Non-Settlement with LoanPro Payments)
SELECT
    '14: PAYMENT_AFTER_PLACEMENT × IMPACT' AS ANALYSIS_SECTION,
    LATEST_LP_PAYMENT_AFTER_PLACEMENT,
    IMPACT_CATEGORY,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'N'
    AND TOTAL_LP_PAYMENT_ATTEMPTS > 0
GROUP BY LATEST_LP_PAYMENT_AFTER_PLACEMENT, IMPACT_CATEGORY
ORDER BY LOAN_COUNT DESC;

-- ============================================================================
-- DEBT SETTLEMENT LOANS ANALYSIS
-- ============================================================================

-- 15: Debt Settlement Loans by Settlement Status
SELECT
    '15: DEBT_SETTLEMENT BY STATUS' AS ANALYSIS_SECTION,
    SETTLEMENTSTATUS,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_SETTLEMENT_LOANS,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'Y'
GROUP BY SETTLEMENTSTATUS
ORDER BY LOAN_COUNT DESC;

-- 16: Debt Settlement Loans by Settlement Portfolio
SELECT
    '16: DEBT_SETTLEMENT BY PORTFOLIO' AS ANALYSIS_SECTION,
    SETTLEMENT_PORTFOLIOS,
    COUNT(*) AS LOAN_COUNT,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) AS PCT_OF_SETTLEMENT_LOANS,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'Y'
GROUP BY SETTLEMENT_PORTFOLIOS
ORDER BY LOAN_COUNT DESC;

-- 17: Debt Settlement Loans by Status × Impact Category
SELECT
    '17: DEBT_SETTLEMENT STATUS × IMPACT' AS ANALYSIS_SECTION,
    SETTLEMENTSTATUS,
    IMPACT_CATEGORY,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'Y'
GROUP BY SETTLEMENTSTATUS, IMPACT_CATEGORY
ORDER BY SETTLEMENTSTATUS, LOAN_COUNT DESC;

-- 18: Debt Settlement Loans by Portfolio × Impact Category
SELECT
    '18: DEBT_SETTLEMENT PORTFOLIO × IMPACT' AS ANALYSIS_SECTION,
    SETTLEMENT_PORTFOLIOS,
    IMPACT_CATEGORY,
    COUNT(*) AS LOAN_COUNT,
    SUM(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT) AS TOTAL_SETTLED_COLLECTED,
    ROUND(AVG(ACTIVE_SETTLED_LP_PAYMENT_AMOUNT), 2) AS AVG_SETTLED_PER_LOAN
FROM temp_autopay_analysis
WHERE HAS_DEBT_SETTLEMENT_DATA = 'Y'
GROUP BY SETTLEMENT_PORTFOLIOS, IMPACT_CATEGORY
ORDER BY SETTLEMENT_PORTFOLIOS, LOAN_COUNT DESC;
