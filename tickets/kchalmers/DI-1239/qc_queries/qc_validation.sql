-- COMPREHENSIVE QC VALIDATION FOR VW_LOAN_BANKRUPTCY
-- Run these queries to validate the view after creation
-- Ticket: DI-1239

-- Object preview
SELECT TOP 100 *
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY;

-- 1. OVERALL RECORD COUNTS AND DATA TYPES
SELECT 
    'OVERALL_SUMMARY' as test_name,
    COUNT(*) as total_records,
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    COUNT(DISTINCT CASE_NUMBER) as unique_case_numbers,
    COUNT(DISTINCT DATA_SOURCE) as data_sources
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY;

-- 2. DATA SOURCE BREAKDOWN
SELECT 
    'DATA_SOURCE_BREAKDOWN' as test_name,
    DATA_SOURCE, 
    COUNT(*) as records, 
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    COUNT(DISTINCT CASE_NUMBER) as unique_cases,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as pct_of_total
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE 
ORDER BY records DESC;

-- 2a. PORTFOLIO CONTEXT ANALYSIS
SELECT 
    'PORTFOLIO_CONTEXT' as test_name,
    HAS_BANKRUPTCY_PORTFOLIO,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    ROUND(AVG(PORTFOLIO_COUNT), 2) as avg_portfolios_per_loan
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY HAS_BANKRUPTCY_PORTFOLIO;

-- 3. BANKRUPTCY_CHAPTER BREAKDOWN BY DATA SOURCE
SELECT 
    'BANKRUPTCY_CHAPTER_BY_SOURCE' as test_name,
    DATA_SOURCE,
    BANKRUPTCY_CHAPTER,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE, BANKRUPTCY_CHAPTER
ORDER BY DATA_SOURCE, records DESC;

-- 4. PETITION_STATUS BREAKDOWN BY DATA SOURCE
SELECT 
    'PETITION_STATUS_BY_SOURCE' as test_name,
    DATA_SOURCE,
    PETITION_STATUS,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE, PETITION_STATUS
ORDER BY DATA_SOURCE, records DESC;

-- 5. PROCESS_STATUS BREAKDOWN BY DATA SOURCE
SELECT 
    'PROCESS_STATUS_BY_SOURCE' as test_name,
    DATA_SOURCE,
    PROCESS_STATUS,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
WHERE PROCESS_STATUS IS NOT NULL
GROUP BY DATA_SOURCE, PROCESS_STATUS
ORDER BY DATA_SOURCE, records DESC;

-- 6. DATE FIELD COMPLETENESS BY DATA SOURCE
SELECT 
    'DATE_COMPLETENESS' as test_name,
    DATA_SOURCE,
    COUNT(*) as total_records,
    COUNT(FILING_DATE) as filing_date_populated,
    COUNT(NOTICE_RECEIVED_DATE) as notice_date_populated,
    COUNT(DISMISSED_DATE) as dismissed_date_populated,
    ROUND(COUNT(FILING_DATE) * 100.0 / COUNT(*), 2) as filing_date_pct
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE
ORDER BY total_records DESC;

-- 7. NULL VALUE ANALYSIS BY COLUMN
SELECT 
    'NULL_ANALYSIS' as test_name,
    DATA_SOURCE,
    COUNT(*) as total_records,
    COUNT(CASE WHEN BANKRUPTCY_ID IS NULL THEN 1 END) as bankruptcy_id_nulls,
    COUNT(CASE WHEN CASE_NUMBER IS NULL THEN 1 END) as case_number_nulls,
    COUNT(CASE WHEN BANKRUPTCY_CHAPTER IS NULL THEN 1 END) as chapter_nulls,
    COUNT(CASE WHEN PETITION_STATUS IS NULL THEN 1 END) as petition_status_nulls,
    COUNT(CASE WHEN CUSTOMER_ID IS NULL THEN 1 END) as customer_id_nulls
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE
ORDER BY total_records DESC;

-- 8. DATA QUALITY - DUPLICATE CASE NUMBERS
SELECT 
    'DUPLICATE_CASE_NUMBERS' as test_name,
    CASE_NUMBER,
    COUNT(*) as duplicate_count,
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    LISTAGG(DISTINCT DATA_SOURCE, ', ') as data_sources
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
WHERE CASE_NUMBER IS NOT NULL
GROUP BY CASE_NUMBER
HAVING COUNT(*) > 1
ORDER BY duplicate_count DESC
LIMIT 20;

-- 9. LOAN_ID DATA TYPE VALIDATION
SELECT 
    'LOAN_ID_VALIDATION' as test_name,
    DATA_SOURCE,
    MIN(LENGTH(LOAN_ID)) as min_length,
    MAX(LENGTH(LOAN_ID)) as max_length,
    COUNT(CASE WHEN TRY_CAST(LOAN_ID AS NUMBER) IS NOT NULL THEN 1 END) as numeric_loan_ids,
    COUNT(CASE WHEN TRY_CAST(LOAN_ID AS NUMBER) IS NULL THEN 1 END) as non_numeric_loan_ids
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE
ORDER BY DATA_SOURCE;

-- 10. SOURCE TABLE VALIDATION - ENTITY
SELECT 
    'SOURCE_VALIDATION_ENTITY' as test_name,
    'Bankruptcy Entity Source' as source, 
    COUNT(*) as count
FROM BUSINESS_INTELLIGENCE.BRIDGE.VW_BANKRUPTCY_ENTITY_CURRENT 
WHERE ACTIVE = 1 AND DELETED = 0
UNION ALL
SELECT 
    'SOURCE_VALIDATION_ENTITY' as test_name,
    'VW_LOAN_BANKRUPTCY Entity Records' as source, 
    COUNT(*) as count
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
WHERE DATA_SOURCE = 'BANKRUPTCY_ENTITY';

-- 11. SOURCE TABLE VALIDATION - CUSTOM SETTINGS
SELECT 
    'SOURCE_VALIDATION_CUSTOM' as test_name,
    'Custom Settings Source' as source, 
    COUNT(CASE WHEN BANKRUPTCY_CASE_NUMBER IS NOT NULL THEN 1 END) as count
FROM BUSINESS_INTELLIGENCE.BRIDGE.VW_LMS_CUSTOM_LOAN_SETTINGS_CURRENT
UNION ALL
SELECT 
    'SOURCE_VALIDATION_CUSTOM' as test_name,
    'VW_LOAN_BANKRUPTCY Custom Records' as source, 
    COUNT(*) as count
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
WHERE DATA_SOURCE = 'CUSTOM_SETTINGS';

-- 12. BUSINESS LOGIC VALIDATION - OUTBOUND SUPPRESSION
SELECT 
    'BUSINESS_LOGIC_SUPPRESSION' as test_name,
    'Total Loans in View' as metric,
    COUNT(DISTINCT LOAN_ID) as value
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
UNION ALL
SELECT 
    'BUSINESS_LOGIC_SUPPRESSION' as test_name,
    'Loans for Suppression (NOT Dismissed/Discharged)' as metric,
    COUNT(DISTINCT LOAN_ID) as value
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
WHERE PETITION_STATUS NOT IN ('Dismissed', 'Discharged')
   OR PETITION_STATUS IS NULL
UNION ALL
SELECT 
    'BUSINESS_LOGIC_SUPPRESSION' as test_name,
    'Loans Safe to Include (Dismissed/Discharged)' as metric,
    COUNT(DISTINCT LOAN_ID) as value
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
WHERE PETITION_STATUS IN ('Dismissed', 'Discharged');

-- 13. FILING DATE ANALYSIS
SELECT 
    'FILING_DATE_ANALYSIS' as test_name,
    DATA_SOURCE,
    MIN(FILING_DATE) as earliest_filing,
    MAX(FILING_DATE) as latest_filing,
    COUNT(FILING_DATE) as records_with_filing_date,
    ROUND(AVG(DATEDIFF(days, FILING_DATE, CURRENT_DATE)), 0) as avg_days_since_filing
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
WHERE FILING_DATE IS NOT NULL
GROUP BY DATA_SOURCE
ORDER BY DATA_SOURCE;

-- 14. MOST_RECENT_ACTIVE_BANKRUPTCY VALIDATION
SELECT 
    'MOST_RECENT_ACTIVE_VALIDATION' as test_name,
    MOST_RECENT_ACTIVE_BANKRUPTCY,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as pct_of_total
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY MOST_RECENT_ACTIVE_BANKRUPTCY
ORDER BY MOST_RECENT_ACTIVE_BANKRUPTCY;

-- 15. MOST_RECENT_ACTIVE_BANKRUPTCY BY DATA SOURCE
SELECT 
    'MOST_RECENT_BY_SOURCE' as test_name,
    DATA_SOURCE,
    MOST_RECENT_ACTIVE_BANKRUPTCY,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY DATA_SOURCE, MOST_RECENT_ACTIVE_BANKRUPTCY
ORDER BY DATA_SOURCE, MOST_RECENT_ACTIVE_BANKRUPTCY;

-- 16. MOST_RECENT_ACTIVE_BANKRUPTCY LOGIC VALIDATION
-- Each loan should have at most 1 record marked as 'Y'
SELECT 
    'MOST_RECENT_LOGIC_CHECK' as test_name,
    LOAN_ID,
    COUNT(*) as total_records,
    COUNT(CASE WHEN MOST_RECENT_ACTIVE_BANKRUPTCY = 'Y' THEN 1 END) as most_recent_count,
    COUNT(CASE WHEN ACTIVE = 1 THEN 1 END) as active_count,
    COUNT(CASE WHEN DUPE_CASE_NUMBER = FALSE THEN 1 END) as non_duplicate_count
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY LOAN_ID
HAVING COUNT(CASE WHEN MOST_RECENT_ACTIVE_BANKRUPTCY = 'Y' THEN 1 END) > 1
ORDER BY most_recent_count DESC
LIMIT 10;

-- 17. ACTIVE STATUS AND MOST_RECENT_ACTIVE_BANKRUPTCY CORRELATION
SELECT 
    'ACTIVE_CORRELATION' as test_name,
    ACTIVE,
    DUPE_CASE_NUMBER,
    MOST_RECENT_ACTIVE_BANKRUPTCY,
    COUNT(*) as records
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY ACTIVE, DUPE_CASE_NUMBER, MOST_RECENT_ACTIVE_BANKRUPTCY
ORDER BY ACTIVE DESC, DUPE_CASE_NUMBER, MOST_RECENT_ACTIVE_BANKRUPTCY;

-- 18. MOST_RECENT_BANKRUPTCY VALIDATION (Without Active Filter)
SELECT 
    'MOST_RECENT_VALIDATION' as test_name,
    MOST_RECENT_BANKRUPTCY,
    COUNT(*) as records,
    COUNT(DISTINCT LOAN_ID) as unique_loans,
    ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER(), 2) as pct_of_total
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY MOST_RECENT_BANKRUPTCY
ORDER BY MOST_RECENT_BANKRUPTCY;

-- 19. COMPARISON OF MOST_RECENT_ACTIVE_BANKRUPTCY vs MOST_RECENT_BANKRUPTCY
SELECT 
    'COLUMN_COMPARISON' as test_name,
    MOST_RECENT_ACTIVE_BANKRUPTCY,
    MOST_RECENT_BANKRUPTCY,
    ACTIVE,
    COUNT(*) as record_count
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY
GROUP BY MOST_RECENT_ACTIVE_BANKRUPTCY, MOST_RECENT_BANKRUPTCY, ACTIVE
ORDER BY ACTIVE DESC, MOST_RECENT_ACTIVE_BANKRUPTCY DESC, MOST_RECENT_BANKRUPTCY DESC;

-- 20. MOST_RECENT_BANKRUPTCY LOGIC VALIDATION
-- Each loan should have exactly 1 record marked as 'Y' for MOST_RECENT_BANKRUPTCY
SELECT 
    'MOST_RECENT_LOGIC_CHECK' as test_name,
    LOAN_ID,
    COUNT(*) as total_records,
    COUNT(CASE WHEN MOST_RECENT_BANKRUPTCY = 'Y' THEN 1 END) as most_recent_count,
    COUNT(CASE WHEN MOST_RECENT_ACTIVE_BANKRUPTCY = 'Y' THEN 1 END) as most_recent_active_count
FROM BUSINESS_INTELLIGENCE_DEV.ANALYTICS.VW_LOAN_BANKRUPTCY 
GROUP BY LOAN_ID
HAVING COUNT(CASE WHEN MOST_RECENT_BANKRUPTCY = 'Y' THEN 1 END) != 1
ORDER BY most_recent_count DESC
LIMIT 10;