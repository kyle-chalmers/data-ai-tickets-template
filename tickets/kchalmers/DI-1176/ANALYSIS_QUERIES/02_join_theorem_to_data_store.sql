-- DI-1176: Join Theorem Applications to DATA_STORE Status Transition View
-- This query joins the uploaded Theorem applications to the unfiltered MVW_APPL_STATUS_TRANSITION view
-- Enhanced with credit policy decisions, adverse actions, and application status details

-- Join Theorem applications to comprehensive DATA_STORE decision and status data
SELECT 
    ta.payoffuid as THEOREM_APPLICATION_ID,
    
    -- Application Timeline
    ast.APPLICATION_STARTED,
    ast.FIRST_APPLIED_DATE,
    ast.FIRST_DECLINE_MANUAL_REVIEW_DATE,
    ast.FIRST_FUNDED_DATE,
    
    -- Credit Policy Decision Data
    cpd.FINALDECISION as CREDIT_POLICY_FINAL_DECISION,
    /*cpd.ADVERSEACTION1,
    cpd.ADVERSEACTION2,
    cpd.ADVERSEACTION3,
    cpd.ADVERSEACTION4,*/
    cpd.CREATED_AT as CREDIT_POLICY_DECISION_DATE,
    cpd.CREDITPOLICYVERSION,

    -- Application Status from VW_APPLICATION
    app.GEN_STATUS as CURRENT_APPLICATION_STATUS,
    app.DATETIMECURRENTSTATUS as CURRENT_STATUS_DATE,
    
    -- UTM Attribution Data
    ast.UTM_SOURCE,
    ast.UTM_MEDIUM,
    ast.UTM_CAMPAIGN,
    ast.LAST_TOUCH_UTM_CHANNEL_GROUPING,
    ast.LAST_TOUCH_UTM_CHANNEL_GROUPING_PARENT,

    -- Adverse Actions
   /* aa.ADVERSE_ACTION_DATE,
    aa.ADVERSE_ACTIONS as ADVERSE_ACTION_LIST*/
-- Derived Application Classification
    CASE
        WHEN ast.APPLIED_COUNT >= 1 THEN 'APPLIED'
        ELSE 'STARTED_ONLY'
    END as APPLICATION_STATUS_CLASSIFICATION,

    -- Credit Policy Decision Classification
    CASE
        WHEN cpd.FINALDECISION = 'Approve' THEN 'APPROVED'
        WHEN cpd.FINALDECISION = 'Decline' THEN 'DECLINED_BY_POLICY'
        WHEN cpd.FINALDECISION = 'ManualReview' THEN 'MANUAL_REVIEW_REQUIRED'
        WHEN cpd.FINALDECISION IS NULL AND ast.APPLIED_COUNT >= 1 THEN 'NO_CREDIT_DECISION_FOUND'
        ELSE 'NO_CREDIT_DECISION_REQUIRED'
    END as CREDIT_POLICY_DECISION_CLASSIFICATION

FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.DI_1176_THEOREM_APPLICATIONS ta

LEFT JOIN BUSINESS_INTELLIGENCE.DATA_STORE.MVW_APPL_STATUS_TRANSITION ast
    ON CAST(ast.PAYOFFUID as VARCHAR) = ta.payoffuid

LEFT JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_APPLICATION app
    ON app.PAYOFF_UID = ta.payoffuid

LEFT JOIN (
    SELECT
        PAYOFFUID,
        FINALDECISION,
        DECISIONREASON,
        ADVERSEACTION1,
        ADVERSEACTION2,
        ADVERSEACTION3,
        ADVERSEACTION4,
        CREATED_AT,
        CREDITPOLICYVERSION,
        ROW_NUMBER() OVER (PARTITION BY PAYOFFUID ORDER BY CREATED_AT DESC) as rn
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.VW_CREDIT_POLICY_DECISION_PARSED
    WHERE SOURCE = 'prod' AND ACTIVE_RECORD_FLAG = true
) cpd ON cpd.PAYOFFUID = ta.payoffuid AND cpd.rn = 1

LEFT JOIN (
    SELECT
        app.PAYOFF_UID,
        MIN(TO_DATE(aa.CREATEDDATE)) AS ADVERSE_ACTION_DATE,
        LISTAGG(aa.REASON, '; ') WITHIN GROUP (ORDER BY aa.CREATEDDATE) AS ADVERSE_ACTIONS
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.VW_ADVERSE_ACTIONS aa
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_APPLICATION app ON app.ID = aa.APPLICATION
    GROUP BY app.PAYOFF_UID
) aa ON aa.PAYOFF_UID = ta.payoffuid

ORDER BY ta.payoffuid;