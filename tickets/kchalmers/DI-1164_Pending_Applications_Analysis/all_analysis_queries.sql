-- ============================================================================
-- PENDING APPLICATIONS ANALYSIS - COMPLETE QUERY COLLECTION
-- Generated: January 8, 2025
-- Purpose: Comprehensive SQL queries for analyzing pending loan applications
-- ============================================================================

-- ============================================================================
-- SECTION 1: BASIC PENDING COUNTS AND OVERVIEW
-- ============================================================================

-- 1.1 Count pending applications for a specific date
SELECT COUNT(*) AS PENDING_COUNT
FROM BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS_OPTIMIZED 
WHERE DATE = '2025-01-08' 
AND ORIGINATION_STATUS = 'Pending'
AND DATA_SOURCE = 'LoanPro';

-- 1.2 Get origination status counts for last 7 days
SELECT 
    DATE, 
    ORIGINATION_STATUS, 
    COUNT(*) as count 
FROM BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS 
WHERE DATE >= DATEADD(day, -7, CURRENT_DATE()) 
GROUP BY DATE, ORIGINATION_STATUS 
ORDER BY DATE DESC, ORIGINATION_STATUS;

-- 1.3 Check pending counts in optimized view for 2025
SELECT 
    DATE, 
    ORIGINATION_STATUS, 
    COUNT(*) as count 
FROM BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS_OPTIMIZED 
WHERE DATE >= '2025-01-01' 
    AND ORIGINATION_STATUS = 'Pending' 
GROUP BY DATE, ORIGINATION_STATUS 
ORDER BY DATE DESC 
LIMIT 10;

-- ============================================================================
-- SECTION 2: STATUS DISTRIBUTION ANALYSIS
-- ============================================================================

-- 2.1 Current loan sub-statuses distribution (excluding terminal statuses)
SELECT DISTINCT 
    SS.TITLE AS SUB_STATUS,
    COUNT(DISTINCT C.LOAN_ID) AS LOAN_COUNT
FROM BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
    ON SS.ID = C.LOAN_SUB_STATUS_ID
    AND C.SCHEMA_NAME = SS.SCHEMA_NAME
WHERE SS.TITLE NOT IN ('Declined', 'Withdrawn', 'Expired', 'Started', 'Funded')
    AND SS.TITLE NOT LIKE '%Closed%'
    AND C.SCHEMA_NAME = CONFIG.LOS_SCHEMA()
GROUP BY SS.TITLE
ORDER BY LOAN_COUNT DESC
LIMIT 20;

-- 2.2 Pending applications by current status (key bottleneck statuses)
SELECT 
    SS.TITLE AS STATUS,
    COUNT(*) AS COUNT,
    DATE(MAX(C.LAST_UPDATE)) AS LATEST_UPDATE
FROM BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
    ON SS.ID = C.LOAN_SUB_STATUS_ID
WHERE SS.TITLE IN ('Underwriting', 'Doc Upload', 'Pre-Funding', 'Pending Funding', 'ICS', 'Awaiting DCP')
GROUP BY SS.TITLE
ORDER BY COUNT DESC;

-- ============================================================================
-- SECTION 3: LOANPRO PENDING APPLICATIONS DETAILED ANALYSIS
-- ============================================================================

-- 3.1 Pending LoanPro applications by status for today
SELECT 
    DATE(A.FIRST_UNDERWRITING_DATETIME) AS PENDING_DATE,
    COUNT(*) AS APP_COUNT,
    SS.TITLE AS CURRENT_STATUS
FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP A
INNER JOIN BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
    ON C.LOAN_ID = A.APPLICATION_ID
    AND C.SCHEMA_NAME = CONFIG.LOS_SCHEMA()
INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
    ON SS.ID = C.LOAN_SUB_STATUS_ID
    AND C.SCHEMA_NAME = SS.SCHEMA_NAME
    AND SS.TITLE NOT IN ('Declined', 'Withdrawn', 'Expired', 'Started')
    AND SS.TITLE NOT LIKE '%Closed%'
WHERE A.SOURCE = 'LOANPRO'
    AND A.FIRST_UNDERWRITING_DATETIME >= CURRENT_DATE()
    AND A.FIRST_UNDERWRITING_DATETIME IS NOT NULL
    AND A.FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
GROUP BY DATE(A.FIRST_UNDERWRITING_DATETIME), SS.TITLE
ORDER BY PENDING_DATE DESC, APP_COUNT DESC;

-- 3.2 Individual pending applications with time analysis
SELECT 
    A.APPLICATION_ID,
    SS.TITLE AS CURRENT_STATUS,
    A.FIRST_UNDERWRITING_DATETIME,
    A.LAST_LOAN_DOCS_COMPLETED_DATETIME,
    DATEDIFF('hour', A.FIRST_UNDERWRITING_DATETIME, CURRENT_TIMESTAMP()) AS HOURS_PENDING
FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP A
INNER JOIN BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
    ON C.LOAN_ID = A.APPLICATION_ID
INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
    ON SS.ID = C.LOAN_SUB_STATUS_ID
WHERE A.SOURCE = 'LOANPRO'
    AND DATE(A.FIRST_UNDERWRITING_DATETIME) = CURRENT_DATE()
    AND A.FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
    AND SS.TITLE NOT IN ('Declined', 'Withdrawn', 'Expired', 'Started')
    AND SS.TITLE NOT LIKE '%Closed%'
ORDER BY A.FIRST_UNDERWRITING_DATETIME DESC
LIMIT 50;

-- ============================================================================
-- SECTION 4: TIME-BASED BOTTLENECK ANALYSIS
-- ============================================================================

-- 4.1 Applications stuck in pending statuses with time analysis
WITH pending_apps AS (
    SELECT 
        C.LOAN_ID AS APPLICATION_ID,
        SS.TITLE AS CURRENT_STATUS,
        C.LAST_UPDATE AS LAST_UPDATE_TIME,
        DATEDIFF('hour', C.LAST_UPDATE, CURRENT_TIMESTAMP()) AS HOURS_IN_STATUS
    FROM BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
    INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
        ON SS.ID = C.LOAN_SUB_STATUS_ID
        AND C.SCHEMA_NAME = SS.SCHEMA_NAME
    WHERE SS.TITLE IN ('Underwriting', 'Doc Upload', 'Awaiting DCP', 'Pre-Funding', 'Pending Funding', 'ICS')
        AND C.SCHEMA_NAME = CONFIG.LOS_SCHEMA()
        AND DATE(C.LAST_UPDATE) >= DATEADD(day, -7, CURRENT_DATE())
)
SELECT 
    CURRENT_STATUS,
    COUNT(*) AS APP_COUNT,
    AVG(HOURS_IN_STATUS) AS AVG_HOURS_STUCK,
    MIN(HOURS_IN_STATUS) AS MIN_HOURS,
    MAX(HOURS_IN_STATUS) AS MAX_HOURS
FROM pending_apps
GROUP BY CURRENT_STATUS
ORDER BY APP_COUNT DESC;

-- 4.2 Recent pending status transitions analysis
WITH recent_pending AS (
    SELECT 
        APPLICATION_ID,
        OLD_STATUS_VALUE,
        NEW_STATUS_VALUE,
        NEW_STATUS_BEGIN_DATETIME,
        TIME_SPENT_IN_OLD_STATUS
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_APPLICATION_STATUS_HISTORY 
    WHERE SOURCE = 'LOANPRO'
        AND DATE(NEW_STATUS_BEGIN_DATETIME) >= DATEADD(day, -1, CURRENT_DATE())
        AND NEW_STATUS_VALUE IN ('Agent Document Verification Pending', 'Customer Document Verification Pending', 
                                  'Underwriting', 'Manual Review', 'Conditional Approval')
)
SELECT 
    NEW_STATUS_VALUE AS PENDING_STATUS,
    COUNT(DISTINCT APPLICATION_ID) AS APP_COUNT,
    AVG(TIME_SPENT_IN_OLD_STATUS) AS AVG_TIME_IN_PREV_STATUS,
    MAX(NEW_STATUS_BEGIN_DATETIME) AS LATEST_ENTRY
FROM recent_pending
GROUP BY NEW_STATUS_VALUE
ORDER BY APP_COUNT DESC;

-- ============================================================================
-- SECTION 5: COMPREHENSIVE PENDING ANALYSIS FROM DOCUMENT
-- ============================================================================

-- 5.1 Identify pending LoanPro applications with full details
WITH pending_apps AS (
    SELECT 
        A.APPLICATION_ID,
        SCE.COMPANY_NAME AS PORTFOLIONAME,
        TO_DATE(A.FIRST_UNDERWRITING_DATETIME) AS PENDING_DATE,
        CF.REQUESTED_LOAN_AMOUNT,
        SS.TITLE AS CURRENT_STATUS,
        DATEDIFF('hour', A.FIRST_UNDERWRITING_DATETIME, CURRENT_TIMESTAMP()) AS HOURS_PENDING
    FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP A
    INNER JOIN BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT CF
        ON CF.LOAN_ID = A.APPLICATION_ID
    INNER JOIN BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
        ON C.LOAN_ID = A.APPLICATION_ID
    INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
        ON SS.ID = C.LOAN_SUB_STATUS_ID
    WHERE A.SOURCE = 'LOANPRO'
        AND A.FIRST_UNDERWRITING_DATETIME IS NOT NULL
        AND A.FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
        AND SS.TITLE NOT IN ('Declined', 'Withdrawn', 'Expired', 'Started')
        AND SS.TITLE NOT LIKE '%Closed%'
)
SELECT 
    CURRENT_STATUS,
    COUNT(*) AS APP_COUNT,
    AVG(HOURS_PENDING) AS AVG_HOURS_PENDING,
    SUM(REQUESTED_LOAN_AMOUNT) AS TOTAL_LOAN_AMOUNT
FROM pending_apps
GROUP BY CURRENT_STATUS
ORDER BY APP_COUNT DESC;

-- ============================================================================
-- SECTION 6: AUGUST 7TH SPECIFIC ANALYSIS QUERIES
-- ============================================================================

-- 6.1 August 7th pending applications detail
SELECT 
    APPLICATION_ID,
    FIRST_UNDERWRITING_DATETIME,
    CURRENT_STATUS,
    REQUESTED_LOAN_AMOUNT,
    DATEDIFF('hour', FIRST_UNDERWRITING_DATETIME, CURRENT_TIMESTAMP()) AS HOURS_PENDING,
    CASE 
        WHEN HOURS_PENDING <= 24 THEN 'Green'
        WHEN HOURS_PENDING <= 48 THEN 'Yellow'
        ELSE 'Red'
    END AS URGENCY_LEVEL
FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP
WHERE DATE(FIRST_UNDERWRITING_DATETIME) = '2025-08-07'
    AND FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
    AND SOURCE = 'LOANPRO'
ORDER BY HOURS_PENDING DESC;

-- 6.2 Status transition flow analysis for August 7th cohort
WITH status_flow AS (
    SELECT 
        APPLICATION_ID,
        OLD_STATUS_VALUE,
        NEW_STATUS_VALUE,
        NEW_STATUS_BEGIN_DATETIME,
        TIME_SPENT_IN_OLD_STATUS
    FROM ANALYTICS.VW_APPLICATION_STATUS_HISTORY
    WHERE APPLICATION_ID IN (
        SELECT APPLICATION_ID 
        FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP
        WHERE DATE(FIRST_UNDERWRITING_DATETIME) = '2025-08-07'
            AND FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
            AND SOURCE = 'LOANPRO'
    )
)
SELECT 
    OLD_STATUS_VALUE,
    NEW_STATUS_VALUE,
    AVG(TIME_SPENT_IN_OLD_STATUS) AS AVG_TIME,
    COUNT(*) AS TRANSITION_COUNT
FROM status_flow
GROUP BY OLD_STATUS_VALUE, NEW_STATUS_VALUE
ORDER BY TRANSITION_COUNT DESC;

-- ============================================================================
-- SECTION 7: MONITORING AND ALERTING QUERIES
-- ============================================================================

-- 7.1 Daily pending applications monitor view
CREATE OR REPLACE VIEW ANALYTICS.VW_DAILY_PENDING_MONITOR AS
SELECT 
    DATE,
    COUNT(*) AS TOTAL_PENDING,
    AVG(HOURS_PENDING) AS AVG_HOURS,
    COUNT(CASE WHEN HOURS_PENDING > 24 THEN 1 END) AS OVER_24_HOURS,
    COUNT(CASE WHEN HOURS_PENDING > 48 THEN 1 END) AS OVER_48_HOURS,
    SUM(REQUESTED_AMOUNT) AS TOTAL_VALUE_PENDING
FROM (
    SELECT 
        DATE(FIRST_UNDERWRITING_DATETIME) AS DATE,
        APPLICATION_ID,
        REQUESTED_LOAN_AMOUNT AS REQUESTED_AMOUNT,
        DATEDIFF('hour', FIRST_UNDERWRITING_DATETIME, CURRENT_TIMESTAMP()) AS HOURS_PENDING
    FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP
    WHERE SOURCE = 'LOANPRO'
        AND FIRST_UNDERWRITING_DATETIME IS NOT NULL
        AND FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
)
GROUP BY DATE
ORDER BY DATE DESC;

-- 7.2 Aging analysis of pending applications
SELECT 
    CASE 
        WHEN HOURS_PENDING <= 24 THEN '0-24 hours'
        WHEN HOURS_PENDING <= 48 THEN '24-48 hours'
        WHEN HOURS_PENDING <= 72 THEN '48-72 hours'
        ELSE '72+ hours'
    END AS AGE_BUCKET,
    COUNT(*) AS APPLICATION_COUNT
FROM (
    SELECT 
        APPLICATION_ID,
        DATEDIFF('hour', FIRST_UNDERWRITING_DATETIME, CURRENT_TIMESTAMP()) AS HOURS_PENDING
    FROM ANALYTICS.VW_APPLICATION_STATUS_TRANSITION_WIP
    WHERE SOURCE = 'LOANPRO'
        AND FIRST_UNDERWRITING_DATETIME IS NOT NULL
        AND FIRST_LOAN_DOCS_COMPLETED_DATETIME IS NULL
)
GROUP BY AGE_BUCKET
ORDER BY AGE_BUCKET;

-- 7.3 Current pending applications by status (monitoring query)
SELECT 
    SS.TITLE AS STATUS,
    COUNT(DISTINCT C.LOAN_ID) AS COUNT
FROM BRIDGE.VW_LOAN_SETTINGS_ENTITY_CURRENT C
INNER JOIN BRIDGE.VW_LOAN_SUB_STATUS_ENTITY_CURRENT SS
    ON SS.ID = C.LOAN_SUB_STATUS_ID
WHERE SS.TITLE IN ('ICS', 'Doc Upload', 'Underwriting', 
                   'Pre-Funding', 'Pending Funding', 'Awaiting DCP')
GROUP BY SS.TITLE
ORDER BY COUNT DESC;

-- ============================================================================
-- SECTION 8: VIEW STRUCTURE QUERIES
-- ============================================================================

-- 8.1 Get the DDL for the optimized view (for understanding structure)
SELECT GET_DDL('VIEW', 'BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS_OPTIMIZED');

-- 8.2 Describe view structure to understand columns
DESCRIBE VIEW BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS;

-- ============================================================================
-- SECTION 9: EXPLORATORY QUERIES (EXECUTED DURING ANALYSIS)
-- ============================================================================

-- 9.1 Check for origination views in REPORTING schema
SHOW VIEWS IN SCHEMA BUSINESS_INTELLIGENCE.REPORTING LIKE '%ORIGINATION%';

-- 9.2 Check for pending views in REPORTING schema  
SHOW VIEWS IN SCHEMA BUSINESS_INTELLIGENCE.REPORTING LIKE '%PENDING%';

-- 9.3 Query information schema for specific views
SELECT TABLE_NAME 
FROM BUSINESS_INTELLIGENCE.INFORMATION_SCHEMA.VIEWS 
WHERE TABLE_SCHEMA = 'REPORTING' 
    AND (UPPER(TABLE_NAME) LIKE '%ORIGINATION%' 
         OR UPPER(TABLE_NAME) LIKE '%PENDING%') 
ORDER BY TABLE_NAME;

-- 9.4 Get column structure with empty result set
SELECT * 
FROM BUSINESS_INTELLIGENCE.REPORTING.VW_ORIGINATIONS_AND_PENDING_ORIGINATIONS 
WHERE 1=0;

-- ============================================================================
-- END OF QUERY COLLECTION
-- ============================================================================
-- Total Queries: 24
-- Purpose: Complete set of SQL queries for pending application analysis
-- Usage: These queries can be used for ongoing monitoring, troubleshooting,
--        and deeper analysis of the loan origination pipeline bottlenecks
-- ============================================================================