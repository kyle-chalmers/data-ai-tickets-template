/***********************************************************************************************************************
DI-1131 DEV View Deployment Script
Date: 2025-08-14
Author: Kyle Chalmers

Purpose: Deploy updated lookup logic as a VIEW to DEV environment for testing (avoids dynamic table restrictions)
Target: BUSINESS_INTELLIGENCE_DEV.ANALYTICS_PII.VW_EMAIL_TO_PAYOFFUID_MATCH
Sources: Production ANALYTICS_PII tables (to test with real data)

IMPORTANT: This creates a VIEW instead of dynamic table to avoid dependency restrictions
***********************************************************************************************************************/

-- Create the updated logic as a view in DEV for testing
CREATE OR REPLACE VIEW BUSINESS_INTELLIGENCE_DEV.ANALYTICS_PII.VW_EMAIL_TO_PAYOFFUID_MATCH(
	EMAIL,
	PAYOFFUID,
	IS_LOAN,
	FIRST_POSSIBLE_CONTACT_DATE,
	LAST_POSSIBLE_CONTACT_DATE
) AS
/***********************************************************************************************************************
Modified Date:      2025-08-14
Modified By:        Kyle Chalmers  
Ticket:             DI-1131
Environment:        DEV (using production data sources)
Description:        Updated to use current PII tables from BUSINESS_INTELLIGENCE.ANALYTICS_PII schema instead of outdated
                    tables from BUSINESS_INTELLIGENCE.PII schema. This fixes issues where customers with multiple loans
                    were only getting matched to their oldest/first loan instead of all relevant loans.

The query is comprised of 3 main data sources from BUSINESS_INTELLIGENCE.ANALYTICS_PII (in priority order):
1. VW_MEMBER_PII (highest priority - current member data)
2. VW_APPLICATION_PII (middle priority - application data) 
3. VW_LEAD_PII (lowest priority - lead data only)
***********************************************************************************************************************/

-- -- -- -- -- -- -- -- -- MEMBER PII BASE (HIGHEST PRIORITY) -- -- -- -- -- -- -- -- --
WITH LKP_EMAIL_LOAN_1_TO_1_MATCHING_MEMBER AS
(SELECT 
    UPPER(REGEXP_REPLACE(m.EMAIL, '^IN-MIGRATION-', '')) as EMAIL,
    vl.LEAD_GUID as PAYOFFUID,
    TRUE AS IS_LOAN,
    NULL AS FIRST_POSSIBLE_CONTACT_DATE,
    NULL AS LAST_POSSIBLE_CONTACT_DATE
FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m
INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.MEMBER_ID = m.MEMBER_ID
WHERE m.EMAIL IS NOT NULL
  AND UPPER(REGEXP_REPLACE(m.EMAIL, '^IN-MIGRATION-', '')) IN (
    SELECT UPPER(REGEXP_REPLACE(m2.EMAIL, '^IN-MIGRATION-', '')) 
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m2
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl2 ON vl2.MEMBER_ID = m2.MEMBER_ID
    WHERE m2.EMAIL IS NOT NULL 
    GROUP BY UPPER(REGEXP_REPLACE(m2.EMAIL, '^IN-MIGRATION-', '')) 
    HAVING COUNT(DISTINCT vl2.LEAD_GUID) = 1
  )
),

LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_MEMBER AS
(SELECT 
    UPPER(REGEXP_REPLACE(m.EMAIL, '^IN-MIGRATION-', '')) as EMAIL,
    vl.LEAD_GUID as PAYOFFUID,
    TRUE AS IS_LOAN,
    vl.LOAN_CLOSED_DATE AS END_DATE,
    vl.ORIGINATION_DATE
FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m
INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.MEMBER_ID = m.MEMBER_ID
WHERE m.EMAIL IS NOT NULL
  AND UPPER(REGEXP_REPLACE(m.EMAIL, '^IN-MIGRATION-', '')) IN (
    SELECT UPPER(REGEXP_REPLACE(m2.EMAIL, '^IN-MIGRATION-', '')) 
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m2
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl2 ON vl2.MEMBER_ID = m2.MEMBER_ID
    WHERE m2.EMAIL IS NOT NULL 
    GROUP BY UPPER(REGEXP_REPLACE(m2.EMAIL, '^IN-MIGRATION-', '')) 
    HAVING COUNT(DISTINCT vl2.LEAD_GUID) > 1
  )
),

MEMBER_CONTACT_DATES_FIRST_STAGE AS
(SELECT
    A.EMAIL,
    A.PAYOFFUID,
    A.IS_LOAN,
    A.END_DATE,
    A.ORIGINATION_DATE,
    LAG(A.END_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE DESC) AS NEXT_END_DATE,
    DATEADD('day',1,(LAG(A.END_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE))) AS FIRST_POSSIBLE_CONTACT_DATE,
    IFF(NEXT_END_DATE IS NULL AND FIRST_POSSIBLE_CONTACT_DATE IS NOT NULL, NULL, A.END_DATE) AS LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_MEMBER A
),

MEMBER_CONTACT_DATES_FINAL_STAGE AS
(SELECT 
    A.EMAIL,
    A.PAYOFFUID,
    A.IS_LOAN,
    A.FIRST_POSSIBLE_CONTACT_DATE,
    IFF((LAG(A.FIRST_POSSIBLE_CONTACT_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE DESC)) IS NOT NULL
               AND A.LAST_POSSIBLE_CONTACT_DATE IS NULL,
               A.END_DATE, A.LAST_POSSIBLE_CONTACT_DATE) AS LAST_POSSIBLE_CONTACT_DATE
FROM MEMBER_CONTACT_DATES_FIRST_STAGE A
WHERE IFNULL(A.FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(A.LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
),

FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER AS 
(SELECT A.EMAIL, A.PAYOFFUID, A.IS_LOAN, A.FIRST_POSSIBLE_CONTACT_DATE, A.LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LOAN_1_TO_1_MATCHING_MEMBER A
UNION 
SELECT B.EMAIL, B.PAYOFFUID, B.IS_LOAN, B.FIRST_POSSIBLE_CONTACT_DATE, B.LAST_POSSIBLE_CONTACT_DATE
FROM MEMBER_CONTACT_DATES_FINAL_STAGE B
),

-- -- -- -- -- -- -- -- -- APPLICATION PII BASE (MIDDLE PRIORITY) -- -- -- -- -- -- -- -- --
EXCLUDE_MEMBER_FROM_APP AS
(SELECT 
    UPPER(REGEXP_REPLACE(a.EMAIL, '^IN-MIGRATION-', '')) as EMAIL,
    a.LEAD_GUID as PAYOFFUID
FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_APPLICATION_PII a
LEFT JOIN FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER m ON m.EMAIL = UPPER(REGEXP_REPLACE(a.EMAIL, '^IN-MIGRATION-', ''))
WHERE a.EMAIL IS NOT NULL
  AND m.EMAIL IS NULL
),

LKP_EMAIL_LOAN_1_TO_1_MATCHING_APP AS
(SELECT 
    b.EMAIL,
    b.PAYOFFUID,
    IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
    NULL AS FIRST_POSSIBLE_CONTACT_DATE,
    NULL AS LAST_POSSIBLE_CONTACT_DATE
FROM EXCLUDE_MEMBER_FROM_APP b
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = b.PAYOFFUID
WHERE UPPER(b.EMAIL) IN (
    SELECT UPPER(EMAIL) 
    FROM EXCLUDE_MEMBER_FROM_APP 
    WHERE EMAIL IS NOT NULL 
    GROUP BY UPPER(EMAIL) 
    HAVING COUNT(DISTINCT PAYOFFUID) = 1
)
),

LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_APP AS
(SELECT 
    b.EMAIL,
    b.PAYOFFUID,
    IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
    vl.LOAN_CLOSED_DATE AS END_DATE,
    vl.ORIGINATION_DATE
FROM EXCLUDE_MEMBER_FROM_APP b
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = b.PAYOFFUID
WHERE UPPER(b.EMAIL) IN (
    SELECT UPPER(EMAIL) 
    FROM EXCLUDE_MEMBER_FROM_APP 
    WHERE EMAIL IS NOT NULL 
    GROUP BY UPPER(EMAIL) 
    HAVING COUNT(DISTINCT PAYOFFUID) > 1
)
),

APP_CONTACT_DATES_FIRST_STAGE AS
(SELECT
    A.EMAIL,
    A.PAYOFFUID,
    A.IS_LOAN,
    A.END_DATE,
    A.ORIGINATION_DATE,
    LAG(A.END_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE DESC) AS NEXT_END_DATE,
    DATEADD('day',1,(LAG(A.END_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE))) AS FIRST_POSSIBLE_CONTACT_DATE,
    IFF(NEXT_END_DATE IS NULL AND FIRST_POSSIBLE_CONTACT_DATE IS NOT NULL, NULL, A.END_DATE) AS LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_APP A
WHERE A.END_DATE IS NOT NULL OR A.ORIGINATION_DATE IS NOT NULL
),

APP_CONTACT_DATES_FINAL_STAGE AS
(SELECT 
    A.EMAIL,
    A.PAYOFFUID,
    A.IS_LOAN,
    A.FIRST_POSSIBLE_CONTACT_DATE,
    IFF((LAG(A.FIRST_POSSIBLE_CONTACT_DATE) OVER (PARTITION BY A.EMAIL ORDER BY A.END_DATE DESC)) IS NOT NULL
               AND A.LAST_POSSIBLE_CONTACT_DATE IS NULL,
               A.END_DATE, A.LAST_POSSIBLE_CONTACT_DATE) AS LAST_POSSIBLE_CONTACT_DATE
FROM APP_CONTACT_DATES_FIRST_STAGE A
WHERE IFNULL(A.FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(A.LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
),

FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER_AND_APP AS 
(SELECT A.EMAIL, A.PAYOFFUID, A.IS_LOAN, A.FIRST_POSSIBLE_CONTACT_DATE, A.LAST_POSSIBLE_CONTACT_DATE
FROM FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER A
UNION 
SELECT B.EMAIL, B.PAYOFFUID, B.IS_LOAN, B.FIRST_POSSIBLE_CONTACT_DATE, B.LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LOAN_1_TO_1_MATCHING_APP B
UNION 
SELECT C.EMAIL, C.PAYOFFUID, C.IS_LOAN, C.FIRST_POSSIBLE_CONTACT_DATE, C.LAST_POSSIBLE_CONTACT_DATE
FROM APP_CONTACT_DATES_FINAL_STAGE C
),

-- -- -- -- -- -- -- -- -- LEAD PII BASE (LOWEST PRIORITY) -- -- -- -- -- -- -- -- --
EXCLUDE_MEMBER_AND_APP_FROM_LEAD AS
(SELECT 
    UPPER(REGEXP_REPLACE(l.EMAIL, '^IN-MIGRATION-', '')) AS EMAIL,
    l.LEAD_GUID AS PAYOFFUID,
    l.SSN
FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_LEAD_PII l
LEFT JOIN FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER_AND_APP ma ON ma.EMAIL = UPPER(REGEXP_REPLACE(l.EMAIL, '^IN-MIGRATION-', ''))
WHERE l.EMAIL IS NOT NULL
  AND ma.EMAIL IS NULL
),

MOST_USED_EMAIL AS
(SELECT TEMP.* FROM
    (SELECT SSN, EMAIL, COUNT(*) AS TIMES_USED
    FROM EXCLUDE_MEMBER_AND_APP_FROM_LEAD
    WHERE EMAIL IS NOT NULL AND SSN IS NOT NULL
    GROUP BY SSN, EMAIL) TEMP
QUALIFY DENSE_RANK() OVER (PARTITION BY SSN ORDER BY TIMES_USED DESC, EMAIL) = 1
),

LKP_EMAIL_LEAD_ENHANCED AS
(SELECT 
    COALESCE(A.EMAIL, B.EMAIL) AS EMAIL,
    A.PAYOFFUID,
    A.SSN
FROM EXCLUDE_MEMBER_AND_APP_FROM_LEAD A
LEFT JOIN MOST_USED_EMAIL B ON A.SSN = B.SSN
),

LKP_EMAIL_LOAN_1_TO_1_MATCHING_LEAD AS
(SELECT 
    l.EMAIL,
    l.PAYOFFUID,
    IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
    NULL AS FIRST_POSSIBLE_CONTACT_DATE,
    NULL AS LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LEAD_ENHANCED l
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = l.PAYOFFUID
WHERE l.EMAIL IN (
    SELECT EMAIL 
    FROM LKP_EMAIL_LEAD_ENHANCED 
    WHERE EMAIL IS NOT NULL 
    GROUP BY EMAIL 
    HAVING COUNT(DISTINCT PAYOFFUID) = 1
)
),

LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_LEAD AS
(SELECT 
    l.PAYOFFUID,
    l.EMAIL,
    l.SSN,
    IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
    vl.ORIGINATION_DATE,
    vl.LOAN_CLOSED_DATE
FROM LKP_EMAIL_LEAD_ENHANCED l
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = l.PAYOFFUID
WHERE l.EMAIL IN (
    SELECT EMAIL 
    FROM LKP_EMAIL_LEAD_ENHANCED 
    WHERE EMAIL IS NOT NULL 
    GROUP BY EMAIL 
    HAVING COUNT(DISTINCT PAYOFFUID) > 1
)
),

LEAD_CONTACT_DATES AS
(SELECT
    A.EMAIL,
    A.PAYOFFUID,
    A.IS_LOAN,
    CASE 
        WHEN A.ORIGINATION_DATE IS NOT NULL AND 
             LAG(A.LOAN_CLOSED_DATE) OVER (PARTITION BY A.EMAIL ORDER BY COALESCE(A.ORIGINATION_DATE, CURRENT_DATE)) IS NOT NULL
        THEN DATEADD('day', 1, LAG(A.LOAN_CLOSED_DATE) OVER (PARTITION BY A.EMAIL ORDER BY COALESCE(A.ORIGINATION_DATE, CURRENT_DATE)))
        ELSE NULL
    END AS FIRST_POSSIBLE_CONTACT_DATE,
    
    CASE 
        WHEN A.LOAN_CLOSED_DATE IS NOT NULL AND 
             LEAD(A.ORIGINATION_DATE) OVER (PARTITION BY A.EMAIL ORDER BY COALESCE(A.ORIGINATION_DATE, CURRENT_DATE)) IS NOT NULL
        THEN A.LOAN_CLOSED_DATE
        ELSE NULL
    END AS LAST_POSSIBLE_CONTACT_DATE
FROM LKP_EMAIL_LOAN_NOT_1_TO_1_MATCHING_LEAD A
),

LEAD_UNION AS
(SELECT EMAIL, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE 
FROM LKP_EMAIL_LOAN_1_TO_1_MATCHING_LEAD
UNION
SELECT EMAIL, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE 
FROM LEAD_CONTACT_DATES
WHERE IFNULL(FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
   OR (FIRST_POSSIBLE_CONTACT_DATE IS NULL AND LAST_POSSIBLE_CONTACT_DATE IS NULL)
)

-- FINAL UNION QUERY
SELECT A.EMAIL, A.PAYOFFUID, A.IS_LOAN, A.FIRST_POSSIBLE_CONTACT_DATE, A.LAST_POSSIBLE_CONTACT_DATE
FROM FULL_LKP_EMAIL_LOAN_MATCHING_MEMBER_AND_APP A
UNION
SELECT B.EMAIL, B.PAYOFFUID, B.IS_LOAN, B.FIRST_POSSIBLE_CONTACT_DATE, B.LAST_POSSIBLE_CONTACT_DATE
FROM LEAD_UNION B;