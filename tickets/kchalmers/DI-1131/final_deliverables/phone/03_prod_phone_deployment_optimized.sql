/***********************************************************************************************************************
DI-1131 PRODUCTION Phone Dynamic Table Deployment Script - ULTIMATE OPTIMIZED WITH UNIVERSAL APP DATES
Date: 2025-08-21
Author: Kyle Chalmers

Purpose: Deploy ultimate optimized phone lookup logic to PRODUCTION dynamic table using universal APPLICATION_STARTED_DATE from BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT
Target: BUSINESS_INTELLIGENCE.PII.DT_LKP_PHONE_TO_PAYOFFUID_MATCH
Sources: Production ANALYTICS_PII tables + BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT

ULTIMATE OPTIMIZATIONS:
1. Consolidated duplicate subqueries using single phone counting CTE
2. Combined similar window function logic
3. Simplified redundant format operations by doing it once
4. Uses APPLICATION_STARTED_DATE from VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT as universal start date for BOTH loans and non-loans
5. Optimized with TO_DATE for faster performance
***********************************************************************************************************************/

-- Drop and recreate the dynamic table with ultimate enhanced logic
CREATE OR REPLACE DYNAMIC TABLE BUSINESS_INTELLIGENCE.PII.DT_LKP_PHONE_TO_PAYOFFUID_MATCH
    WAREHOUSE = COMPUTE_WH
    TARGET_LAG = '12 hours'
AS

-- -- -- -- -- -- -- -- -- MEMBER PII BASE (HIGHEST PRIORITY) -- -- -- -- -- -- -- -- --
WITH MEMBER_PHONE_COUNTS AS (
    -- Count loans per phone once for reuse
    SELECT 
        m.PHONE_NUMBER as PHONE,
        COUNT(DISTINCT vl.LEAD_GUID) as LOAN_COUNT
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.MEMBER_ID = m.MEMBER_ID
    WHERE m.PHONE_NUMBER IS NOT NULL
    GROUP BY m.PHONE_NUMBER
),

MEMBER_BASE AS (
    -- Single scan of member data with universal application dates from LOS custom settings
    SELECT 
        m.PHONE_NUMBER as PHONE,
        vl.LEAD_GUID as PAYOFFUID,
        TRUE AS IS_LOAN,
        vl.LOAN_CLOSED_DATE AS END_DATE,
        vl.ORIGINATION_DATE,
        TRY_TO_TIMESTAMP(los.APPLICATION_STARTED_DATE)::DATE AS APPLICATION_STARTED_DATE,
        ec.LOAN_COUNT
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII m
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.MEMBER_ID = m.MEMBER_ID
    INNER JOIN MEMBER_PHONE_COUNTS ec ON ec.PHONE = m.PHONE_NUMBER
    LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT los ON los.LEAD_GUID = vl.LEAD_GUID
    WHERE m.PHONE_NUMBER IS NOT NULL
),

MEMBER_CONTACT_DATES AS (
    SELECT
        PHONE,
        PAYOFFUID,
        IS_LOAN,
        LOAN_COUNT,
        CASE 
            WHEN LOAN_COUNT = 1 THEN NULL
            WHEN LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL 
            THEN DATEADD('day', 1, LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)))
            WHEN LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL 
            THEN DATEADD('day', 1, LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)))
            ELSE NULL
        END AS FIRST_POSSIBLE_CONTACT_DATE,
        CASE 
            WHEN LOAN_COUNT = 1 THEN NULL
            WHEN LEAD(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL
            THEN END_DATE
            WHEN LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NULL
                 AND (END_DATE IS NOT NULL OR APPLICATION_STARTED_DATE IS NOT NULL)
            THEN COALESCE(END_DATE, APPLICATION_STARTED_DATE)
            ELSE NULL
        END AS LAST_POSSIBLE_CONTACT_DATE
    FROM MEMBER_BASE
),

FULL_LKP_PHONE_LOAN_MATCHING_MEMBER AS (
    SELECT PHONE, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE
    FROM MEMBER_CONTACT_DATES
    WHERE LOAN_COUNT = 1
       OR IFNULL(FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
),

-- -- -- -- -- -- -- -- -- APPLICATION PII BASE (MIDDLE PRIORITY) -- -- -- -- -- -- -- -- --
APP_PHONE_COUNTS AS (
    -- Count applications per phone, excluding already matched member phones
    SELECT 
        a.PHONE_NUMBER as PHONE,
        COUNT(DISTINCT a.LEAD_GUID) as APP_COUNT
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_APPLICATION_PII a
    LEFT JOIN FULL_LKP_PHONE_LOAN_MATCHING_MEMBER m ON m.PHONE = a.PHONE_NUMBER
    WHERE a.PHONE_NUMBER IS NOT NULL AND m.PHONE IS NULL
    GROUP BY a.PHONE_NUMBER
),

APP_BASE AS (
    SELECT 
        a.PHONE_NUMBER as PHONE,
        a.LEAD_GUID as PAYOFFUID,
        IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
        vl.LOAN_CLOSED_DATE AS END_DATE,
        vl.ORIGINATION_DATE,
        TRY_TO_TIMESTAMP(los.APPLICATION_STARTED_DATE)::DATE AS APPLICATION_STARTED_DATE,
        ac.APP_COUNT
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_APPLICATION_PII a
    INNER JOIN APP_PHONE_COUNTS ac ON ac.PHONE = a.PHONE_NUMBER
    LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = a.LEAD_GUID
    LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT los ON los.LEAD_GUID = a.LEAD_GUID
    WHERE a.PHONE_NUMBER IS NOT NULL
),

APP_CONTACT_DATES AS (
    SELECT
        PHONE,
        PAYOFFUID,
        IS_LOAN,
        APP_COUNT,
        CASE 
            WHEN APP_COUNT = 1 THEN NULL
            WHEN LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL 
            THEN DATEADD('day', 1, LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)))
            WHEN LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL 
            THEN DATEADD('day', 1, LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)))
            ELSE NULL
        END AS FIRST_POSSIBLE_CONTACT_DATE,
        CASE 
            WHEN APP_COUNT = 1 THEN NULL
            WHEN LEAD(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NOT NULL
            THEN COALESCE(END_DATE, APPLICATION_STARTED_DATE)
            WHEN LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, END_DATE)) IS NULL
                 AND (END_DATE IS NOT NULL OR APPLICATION_STARTED_DATE IS NOT NULL)
            THEN COALESCE(END_DATE, APPLICATION_STARTED_DATE)
            ELSE NULL
        END AS LAST_POSSIBLE_CONTACT_DATE
    FROM APP_BASE
    WHERE APP_COUNT = 1 OR (END_DATE IS NOT NULL OR ORIGINATION_DATE IS NOT NULL OR APPLICATION_STARTED_DATE IS NOT NULL)
),

FULL_LKP_PHONE_LOAN_MATCHING_MEMBER_AND_APP AS (
    SELECT PHONE, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE
    FROM FULL_LKP_PHONE_LOAN_MATCHING_MEMBER
    
    UNION 
    
    SELECT PHONE, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE
    FROM APP_CONTACT_DATES
    WHERE APP_COUNT = 1
       OR IFNULL(FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
),

-- -- -- -- -- -- -- -- -- LEAD PII BASE (LOWEST PRIORITY) -- -- -- -- -- -- -- -- --
LEAD_BASE_FILTERED AS (
    -- Exclude already matched phones and prepare lead data
    SELECT 
        l.PHONE_NUMBER AS PHONE,
        l.LEAD_GUID AS PAYOFFUID,
        l.SSN
    FROM BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_LEAD_PII l
    LEFT JOIN FULL_LKP_PHONE_LOAN_MATCHING_MEMBER_AND_APP ma ON ma.PHONE = l.PHONE_NUMBER
    WHERE l.PHONE_NUMBER IS NOT NULL AND ma.PHONE IS NULL
),

MOST_USED_PHONE AS (
    SELECT SSN, PHONE
    FROM (
        SELECT SSN, PHONE, COUNT(*) AS TIMES_USED
        FROM LEAD_BASE_FILTERED
        WHERE PHONE IS NOT NULL AND SSN IS NOT NULL
        GROUP BY SSN, PHONE
    )
    QUALIFY DENSE_RANK() OVER (PARTITION BY SSN ORDER BY TIMES_USED DESC, PHONE) = 1
),

LEAD_ENHANCED AS (
    SELECT 
        COALESCE(l.PHONE, m.PHONE) AS PHONE,
        l.PAYOFFUID
    FROM LEAD_BASE_FILTERED l
    LEFT JOIN MOST_USED_PHONE m ON l.SSN = m.SSN
),

LEAD_PHONE_COUNTS AS (
    SELECT PHONE, COUNT(DISTINCT PAYOFFUID) as LEAD_COUNT
    FROM LEAD_ENHANCED
    WHERE PHONE IS NOT NULL
    GROUP BY PHONE
),

LEAD_WITH_LOAN_INFO AS (
    SELECT 
        le.PHONE,
        le.PAYOFFUID,
        IFF(vl.LEAD_GUID IS NULL, FALSE, TRUE) AS IS_LOAN,
        vl.ORIGINATION_DATE,
        vl.LOAN_CLOSED_DATE AS END_DATE,
        TRY_TO_TIMESTAMP(los.APPLICATION_STARTED_DATE)::DATE AS APPLICATION_STARTED_DATE,
        lc.LEAD_COUNT
    FROM LEAD_ENHANCED le
    INNER JOIN LEAD_PHONE_COUNTS lc ON lc.PHONE = le.PHONE
    LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl ON vl.LEAD_GUID = le.PAYOFFUID
    LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOS_CUSTOM_LOAN_SETTINGS_CURRENT los ON los.LEAD_GUID = le.PAYOFFUID
),

LEAD_CONTACT_DATES AS (
    SELECT
        PHONE,
        PAYOFFUID,
        IS_LOAN,
        LEAD_COUNT,
        CASE 
            WHEN LEAD_COUNT = 1 THEN NULL
            WHEN APPLICATION_STARTED_DATE IS NOT NULL 
                 AND LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)) IS NOT NULL
            THEN DATEADD('day', 1, LAG(END_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)))
            WHEN APPLICATION_STARTED_DATE IS NOT NULL 
                 AND LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)) IS NOT NULL
            THEN DATEADD('day', 1, LAG(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)))
            ELSE NULL
        END AS FIRST_POSSIBLE_CONTACT_DATE,
        CASE 
            WHEN LEAD_COUNT = 1 THEN NULL
            WHEN END_DATE IS NOT NULL 
                 AND LEAD(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)) IS NOT NULL
            THEN END_DATE
            WHEN APPLICATION_STARTED_DATE IS NOT NULL
                 AND LEAD(APPLICATION_STARTED_DATE) OVER (PARTITION BY PHONE ORDER BY COALESCE(APPLICATION_STARTED_DATE, CURRENT_DATE)) IS NOT NULL
            THEN APPLICATION_STARTED_DATE
            ELSE NULL
        END AS LAST_POSSIBLE_CONTACT_DATE
    FROM LEAD_WITH_LOAN_INFO
)

-- FINAL UNION QUERY
SELECT PHONE, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE
FROM FULL_LKP_PHONE_LOAN_MATCHING_MEMBER_AND_APP

UNION

SELECT PHONE, PAYOFFUID, IS_LOAN, FIRST_POSSIBLE_CONTACT_DATE, LAST_POSSIBLE_CONTACT_DATE 
FROM LEAD_CONTACT_DATES
WHERE LEAD_COUNT = 1
   OR IFNULL(FIRST_POSSIBLE_CONTACT_DATE,'1999-02-01') <> IFNULL(LAST_POSSIBLE_CONTACT_DATE,'1999-02-01')
   OR (FIRST_POSSIBLE_CONTACT_DATE IS NULL AND LAST_POSSIBLE_CONTACT_DATE IS NULL);