USE WAREHOUSE BUSINESS_INTELLIGENCE_LARGE;
USE ROLE BUSINESS_INTELLIGENCE_PII;

CREATE OR REPLACE TABLE BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION_TRANSACTIONS_UPDATE COPY GRANTS AS
WITH target_loans AS (
    -- OPTIMIZATION: Get target loan population upfront to filter all subsequent queries
    SELECT DISTINCT
        LOANID,
        LEAD_GUID,
        CHARGEOFFDATE,
        PRINCIPALBALANCEATCHARGEOFF,
        CHARGED_OFF_PRINCIPAL_ADJUSTMENT,
        LOAN_CURRENT_PLACEMENT,
        PLACEMENT_STATUS_STARTDATE,
        --BANKRUPTCYCHAPTER,
        --BANKRUPTCY_STATUS,
        --DISCHARGE_DATE,
        --SCRAFLAG,
        LASTPAYMENTDATE,
        PORTFOLIONAME,
        UNPAIDBALANCEDUE
    FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION
)
,cls_payment_info AS (
    -- OPTIMIZATION: Pre-filter CLS data to target loans only
    SELECT DISTINCT
        lower(la.lead_guid) as lead_guid,
        la.adjustment_date
    FROM ARCA.FRESHSNOW.VW_CLS_LOAN_ACCOUNT_CURRENT la
    INNER JOIN target_loans tl
        ON upper(la.LEAD_GUID) = upper(tl.LEAD_GUID)
    INNER JOIN ARCA.FRESHSNOW.VW_CLS_LOAN_TAPE lt
        ON upper(la.PAYOFF_LOAN_ID) = upper(lt.LOANID)
        AND lt.LOANSOURCE = 'CLS'
    WHERE COALESCE(la.MIGRATED_TO_LOANPRO, false) = false
)
,all_payment_transactions AS (
    -- OPTIMIZATION: Union payment transactions with pre-filtering
    -- CLS Payments
    SELECT
        cls.NAME::VARCHAR AS TRANSACTION_ID,
        lower(COALESCE(va.payoff_uid, vl.lead_guid)) as lead_guid,
        cls.LOAN_TRANSACTION_DATE,
        cls.POSTED_DATE,
        cls.LOAN_PAYMENT_TYPE,
        cls.LOAN_PAYMENT_APPLICATION_MODE,
        cls.LOAN_APPLIED_SPREAD,
        cls.LOAN_TRANSACTION_AMOUNT,
        cls.LOAN_PRINCIPAL,
        cls.LOAN_INTEREST,
        cls.LOAN_BALANCE,
        cls.LOAN_REVERSED,
        cls.LOAN_REJECTED,
        cls.LOAN_CLEARED,
        UPPER(cls.LOAN_WRITE_OFF_RECOVERY_PAYMENT::TEXT) AS LOAN_WRITE_OFF_RECOVERY_PAYMENT,
        'CLS' AS SOURCE
    FROM BUSINESS_INTELLIGENCE.BRIDGE.VW_CLS_PAYMENT_TRANSACTION cls
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_LOAN_ACCOUNT vla
        ON cls.HK_H_LOAN_ACCOUNT = vla.HK_H_LOAN_ACCOUNT
    INNER JOIN target_loans tl
        ON lower(vla.LEAD_GUID) = lower(tl.LEAD_GUID)
        AND cls.LOAN_TRANSACTION_DATE<= tl.placement_status_startdate
    LEFT JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_APPLICATION va
        ON vla.HK_H_APPL = va.HK_H_APPL
    LEFT JOIN business_intelligence.analytics.vw_loan vl
        ON vla.name = vl.loan_id

    UNION ALL

    -- LoanPro Payments
    SELECT
        lp.PAYMENT_ID::VARCHAR AS TRANSACTION_ID,
        lower(vl.LEAD_GUID) as LEAD_GUID,
        --lp.TRANSACTION_DATE as LOAN_TRANSACTION_DATE,
        lp.APPLY_DATE as LOAN_TRANSACTION_DATE,
        lp.APPLY_DATE AS POSTED_DATE,
        lp.PAYMENT_TYPE as LOAN_PAYMENT_TYPE,
        '' AS LOAN_PAYMENT_APPLICATION_MODE,
        '' AS LOAN_APPLIED_SPREAD,
        lp.TRANSACTION_AMOUNT as LOAN_TRANSACTION_AMOUNT,
        lp.PRINCIPAL_AMOUNT as LOAN_PRINCIPAL,
        lp.INTEREST_AMOUNT as LOAN_INTEREST,
        lp.AFTER_PRINCIPAL_BALANCE as LOAN_BALANCE,
        lp.IS_REVERSED as LOAN_REVERSED,
        lp.IS_REJECTED as LOAN_REJECTED,
        lp.IS_SETTLED as LOAN_CLEARED,
        '' AS LOAN_WRITE_OFF_RECOVERY_PAYMENT,
        'LP' AS SOURCE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LP_PAYMENT_TRANSACTION lp
    INNER JOIN business_intelligence.analytics.vw_loan vl
        ON UPPER(lp.loan_id::TEXT) = UPPER(vl.loan_id::TEXT)
    INNER JOIN target_loans tl
        ON lower(vl.LEAD_GUID) = lower(tl.LEAD_GUID)
    WHERE lp.IS_MIGRATED = 0
)
,loan_other_transactions AS (
    -- OPTIMIZATION: Pre-filter other transactions to target loans
    SELECT
        A.ID::VARCHAR AS TRANSACTION_ID,
        LOWER(B.LEAD_GUID) AS PAYOFFUID,
        UPPER(b.PAYOFF_LOAN_ID) AS LOANID,
        DATE(SPLIT_PART(A.LOAN__TXN_DATE__C,' ',1)) AS LOAN_TRANSACTION_DATE,
        DATE(SPLIT_PART(A.LOAN__TXN_DATE__C,' ',1)) AS EFFECTIVE_DATE,
        A.LOAN__TRANSACTION_TYPE__C AS LOAN_TRANSACTION_TYPE,
        CASE A.LOAN__TRANSACTION_TYPE__C
            WHEN 'Reschedule' THEN CONCAT('Reschedule :',a.LOAN__DESCRIPTION__C)
            WHEN 'Charge Off' THEN CONCAT('Charge off with principal of ',TO_VARCHAR(a.LOAN__CHARGED_OFF_PRINCIPAL__C),' and interest of ',TO_VARCHAR(a.LOAN__CHARGED_OFF_INTEREST__C),'.')
            WHEN 'Cancel One Time ACH' THEN CONCAT('Cancel One Time ACH for ',TO_VARCHAR(a.LOAN__PAYMENT_AMOUNT__C),'for ACH Debit Date of ',TO_VARCHAR(SPLIT_PART(LOAN__OT_ACH_DEBIT_DATE__C,' ',1)))
            WHEN 'Charge Off Reversal' THEN CONCAT('Charge off reversal of charged off principal of ',TO_VARCHAR(a.LOAN__CHARGED_OFF_PRINCIPAL__C),' and charged off interest of ',TO_VARCHAR(a.LOAN__CHARGED_OFF_INTEREST__C),'.')
            WHEN 'Contingency Status Change' THEN CONCAT('Contingency status code change from ',a.LOAN__OLD_CONTINGENCY_STATUS__C,' to ',a.LOAN__NEW_CONTINGENCY_STATUS__C,'.')
            WHEN 'Interest Waive' THEN CONCAT('Waived interest of ',TO_VARCHAR(a.LOAN__WAIVED_INTEREST__C))
            WHEN 'PayOff Quote Generation' THEN CONCAT('PayOff quote generation with Pay Off Date of ',TO_VARCHAR(SPLIT_PART(a.LOAN__PAY_OFF_DATE__C,' ',1)))
            WHEN 'PrincipalAdjustment-Subtract' THEN a.LOAN__DESCRIPTION__C
            WHEN 'Rate Change' THEN CONCAT('Rate Change to new interest rate of ',TO_VARCHAR(a.LOAN__NEW_INTEREST_RATE__C))
            ELSE A.LOAN__TRANSACTION_TYPE__C
        END AS DESCRIPTION,
        a.LOAN__TXN_AMT__C as LOAN_TRANSACTION_AMOUNT,
        FALSE AS PAYMENT_FLAG,
        NULL AS LOAN_PRINCIPAL,
        NULL AS LOAN_INTEREST,
        a.LOAN__LOAN_AMOUNT__C AS STARTING_BALANCE,
        a.LOAN__PRINCIPAL_REMAINING__C AS ENDING_BALANCE,
        CASE WHEN DATE(SPLIT_PART(A.LOAN__TXN_DATE__C,' ',1)) >= tl.CHARGEOFFDATE THEN TRUE ELSE FALSE END AS POSTCHARGEOFFEVENT,
        CASE WHEN a.LOAN__TRANSACTION_TYPE__C = 'Charge Off' THEN TRUE ELSE FALSE END AS CHARGEOFFEVENTIND,
        a.LOAN__REVERSED__C AS LOAN_REVERSED,
        a.LOAN__REJECTED__C AS LOAN_REJECTED,
        CASE WHEN a.LOAN__REVERSED__C OR a.LOAN__REJECTED__C THEN FALSE ELSE TRUE END AS LOAN_CLEARED,
        'CLS' AS SOURCE
    FROM RAW_DATA_STORE.SALESFORCE.LOAN_OTHER_TRANSACTION A
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_LOAN_ACCOUNT B
        ON A.LOAN__LOAN_ACCOUNT__C = B.ID
    INNER JOIN target_loans tl
        ON LOWER(B.LEAD_GUID) = tl.LEAD_GUID
        AND DATE(SPLIT_PART(A.LOAN__TXN_DATE__C,' ',1))<= tl.placement_status_startdate
    WHERE A.ISDELETED <> TRUE
    QUALIFY ROW_NUMBER() OVER (PARTITION BY A.NAME ORDER BY A.DSS_LOAD_DATE DESC) = 1
)
,cash_transactions AS (
    -- OPTIMIZATION: Simplified payment transaction processing
    SELECT
        apt.TRANSACTION_ID,
        tl.LEAD_GUID AS PAYOFFUID,
        tl.LOANID,
        apt.LOAN_TRANSACTION_DATE,
        apt.POSTED_DATE AS EFFECTIVE_DATE,
        'Payment' AS LOAN_TRANSACTION_TYPE,
        CONCAT(apt.LOAN_PAYMENT_TYPE,' ',COALESCE(apt.LOAN_PAYMENT_APPLICATION_MODE,''),': ',COALESCE(apt.LOAN_APPLIED_SPREAD,'')) as DESCRIPTION,
        apt.LOAN_TRANSACTION_AMOUNT,
        TRUE AS PAYMENT_FLAG,
        apt.LOAN_PRINCIPAL,
        apt.LOAN_INTEREST,
        ROUND(apt.LOAN_BALANCE + COALESCE(apt.LOAN_PRINCIPAL, 0), 2) AS STARTING_BALANCE,
        apt.LOAN_BALANCE AS ENDING_BALANCE,
        CASE
            WHEN apt.LOAN_WRITE_OFF_RECOVERY_PAYMENT = 'TRUE' OR apt.LOAN_TRANSACTION_DATE > tl.CHARGEOFFDATE
            THEN TRUE ELSE FALSE
        END AS POSTCHARGEOFFEVENT,
        FALSE AS CHARGEOFFEVENTIND,
        apt.LOAN_REVERSED,
        apt.LOAN_REJECTED,
        apt.LOAN_CLEARED,
        apt.SOURCE
    FROM target_loans tl
    INNER JOIN all_payment_transactions apt
        ON LOWER(tl.LEAD_GUID) = LOWER(apt.lead_guid)
    AND apt.LOAN_TRANSACTION_DATE<= tl.placement_status_startdate
)
,adjustments AS (
    -- OPTIMIZATION: Simplified adjustment processing
    SELECT
        b.ID::VARCHAR AS TRANSACTION_ID,
        tl.LEAD_GUID AS PAYOFFUID,
        tl.LOANID,
        COALESCE(cpi.ADJUSTMENT_DATE, b.ADJUSTMENT_DATE) AS LOAN_TRANSACTION_DATE,
        COALESCE(cpi.ADJUSTMENT_DATE, b.ADJUSTMENT_DATE) AS EFFECTIVE_DATE,
        'Charged Off Principal Adjustment' AS LOAN_TRANSACTION_TYPE,
        CONCAT('Charged off principal adjustment on ', COALESCE(cpi.ADJUSTMENT_DATE, b.ADJUSTMENT_DATE)::VARCHAR,' for ',tl.CHARGED_OFF_PRINCIPAL_ADJUSTMENT::VARCHAR) as DESCRIPTION,
        tl.CHARGED_OFF_PRINCIPAL_ADJUSTMENT AS LOAN_TRANSACTION_AMOUNT,
        FALSE AS PAYMENT_FLAG,
        tl.CHARGED_OFF_PRINCIPAL_ADJUSTMENT AS LOAN_PRINCIPAL,
        NULL AS LOAN_INTEREST,
        tl.PRINCIPALBALANCEATCHARGEOFF AS STARTING_BALANCE,
        tl.PRINCIPALBALANCEATCHARGEOFF - tl.CHARGED_OFF_PRINCIPAL_ADJUSTMENT AS ENDING_BALANCE,
        TRUE AS POSTCHARGEOFFEVENT,
        FALSE AS CHARGEOFFEVENTIND,
        FALSE AS LOAN_REVERSED,
        FALSE AS LOAN_REJECTED,
        TRUE AS LOAN_CLEARED,
        'CLS' AS SOURCE
    FROM target_loans tl
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.VW_LOAN_ACCOUNT b
        ON LOWER(B.LEAD_GUID) = tl.LEAD_GUID
    LEFT JOIN cls_payment_info cpi
        ON cpi.lead_guid = tl.LEAD_GUID
    AND COALESCE(cpi.ADJUSTMENT_DATE, b.ADJUSTMENT_DATE)<= tl.placement_status_startdate
    WHERE tl.CHARGED_OFF_PRINCIPAL_ADJUSTMENT IS NOT NULL
)
-- OPTIMIZATION: Simplified final union and output
SELECT
    A.*,
    tl.LOAN_CURRENT_PLACEMENT,
    tl.PLACEMENT_STATUS_STARTDATE,
    --tl.BANKRUPTCYCHAPTER,
    --tl.BANKRUPTCY_STATUS,
    --tl.DISCHARGE_DATE,
    --tl.SCRAFLAG,
    tl.LASTPAYMENTDATE,
    tl.CHARGEOFFDATE,
    tl.PORTFOLIONAME,
    tl.UNPAIDBALANCEDUE
    --fsdl.is_deceased,
    --fsdl.is_fraud
FROM (
    SELECT * FROM loan_other_transactions
    UNION ALL
    SELECT * FROM cash_transactions
    UNION ALL
    SELECT * FROM adjustments
) A
INNER JOIN target_loans tl
    ON tl.LOANID = A.LOANID
INNER JOIN BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION_TRANSACTIONS aa
on a.TRANSACTION_ID = aa.TRANSACTION_ID and a.LOANID = aa.LOANID
ORDER BY A.payoffuid, A.loan_transaction_date, A.effective_date;