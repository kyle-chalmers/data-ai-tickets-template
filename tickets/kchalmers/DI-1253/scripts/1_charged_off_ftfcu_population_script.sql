USE WAREHOUSE BUSINESS_INTELLIGENCE_LARGE;
--charged_off_ftfcu_allocated_population
WITH base_query AS (
    SELECT vl.LOAN_ID,
           vl.MEMBER_ID,
           DATE(A.PLACEMENT_STATUS_STARTDATE) AS PLACEMENT_STATUS_STARTDATE,
           A.PLACEMENT_STATUS,
           A.LOANID, LOWER(A.PAYOFFUID) AS PAYOFFUID
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE A
    LEFT JOIN business_intelligence.analytics.vw_loan vl
    ON LOWER(vl.LEAD_GUID) = A.PAYOFFUID
    WHERE 1=1
        -- For FTFCU allocated loans
        AND A.PLACEMENT_STATUS = 'Placed - First Tech Credit Union')
,base_ftfcu_allocated_loans AS (
    SELECT bq.*,
           A.* EXCLUDE (payoffuid, PLACEMENT_STATUS, LOANID, PLACEMENT_STATUS_STARTDATE)
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY A
    inner JOIN base_query bq
    ON bq.PAYOFFUID = A.PAYOFFUID
    and bq.PLACEMENT_STATUS_STARTDATE <= A.ASOFDATE
    AND A.CHARGEOFFDATE IS NOT NULL
    QUALIFY ROW_NUMBER() OVER (PARTITION BY bq.PAYOFFUID ORDER BY A.ASOFDATE DESC) = 1)
,bankruptcy_data_filtered AS (
    SELECT vb.*, vl.PAYOFFUID
    -- OPTIMIZATION: Pre-filter bankruptcy data to target population only
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_BANKRUPTCY vb
    INNER JOIN base_ftfcu_allocated_loans vl
        ON vb.LOAN_ID::VARCHAR = vl.LOAN_ID::VARCHAR
    WHERE ((PETITION_STATUS = 'Discharged'
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE)
    OR (PROCESS_STATUS = 'Discharged'
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE)
    OR (vb.MOST_RECENT_BANKRUPTCY = 'Y'  -- Option B: All most recent bankruptcies
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE  -- Filing on or after origination
            AND COALESCE(vb.PETITION_STATUS, '') NOT IN ('Remove Bankruptcy','Dismissed')  -- Exclude remove bankruptcy
            AND COALESCE(vb.PROCESS_STATUS, '') NOT IN ('Remove Bankruptcy','Dismissed')))
    AND FILING_DATE < PLACEMENT_STATUS_STARTDATE
    QUALIFY ROW_NUMBER() OVER (PARTITION BY vl.PAYOFFUID ORDER BY vb.LAST_UPDATED_DATE_PT DESC) = 1)
,delinquency_dates AS (
    -- OPTIMIZATION: Only calculate delinquency dates for target loans
    SELECT
        MLTDH.PAYOFFUID,
        MIN(MLTDH.ASOFDATE) AS DATEOFFIRSTDELINQUENCY,
        MAX(CASE WHEN MLTDH.DAYSPASTDUE = 30 THEN MLTDH.ASOFDATE END) AS MOST_RECENT_DELINQUENCY_DATE
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY MLTDH
    INNER JOIN base_ftfcu_allocated_loans bcol
        ON MLTDH.PAYOFFUID = bcol.PAYOFFUID
        AND MLTDH.ASOFDATE <= bcol.PLACEMENT_STATUS_STARTDATE
    WHERE MLTDH.DAYSPASTDUE >= 30
    GROUP BY MLTDH.PAYOFFUID
)
,payment_history AS (
    -- OPTIMIZATION: Pre-filter payment transactions to target loans only
    SELECT
        LOWER(bcol.PAYOFFUID) AS PAYOFFUID,
        SUM(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
            THEN pt.TRANSACTION_AMOUNT ELSE 0
        END) as TOTALPAYMENTTRANSACTIONSAMOUNT,
        COUNT(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
            THEN 1
        END) as NUMBEROFPAYMENTTRANSACTIONS,
        COUNT(CASE WHEN pt.is_REVERSED OR pt.is_rejected THEN 1 END) as NUMBEROFPAYMENTSREVERSEDORREJECTED,
        SUM(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
                 AND pt.TRANSACTION_DATE >= COALESCE(bd.PROOF_OF_CLAIM_FILED_DATE, '2099-01-01'::DATE)
            THEN pt.TRANSACTION_AMOUNT ELSE 0
        END) AS PAYMENTSAMOUNTAFTERPOCCOMPLETEDDATE,
        COUNT(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
                 AND pt.TRANSACTION_DATE >= COALESCE(bd.PROOF_OF_CLAIM_FILED_DATE, '2099-01-01'::DATE)
            THEN 1
        END) AS PAYMENTSAFTERPOCCOMPLETEDDATE
    FROM base_ftfcu_allocated_loans bcol
    LEFT JOIN bankruptcy_data_filtered bd
        ON LOWER(bcol.PAYOFFUID) = bd.PAYOFFUID
    LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LP_PAYMENT_TRANSACTION pt
        ON pt.LOAN_ID::text = bcol.LOAN_ID::text
    WHERE pt.TRANSACTION_DATE < bcol.PLACEMENT_STATUS_STARTDATE
    GROUP BY bcol.PAYOFFUID
)
,bankruptcy_principal_remaining AS (
    -- OPTIMIZATION: Only calculate for loans with bankruptcy data
    SELECT
        bcol.PAYOFFUID,
        bd.FILING_DATE AS BANKRUPTCYFILEDATE,
        CASE
            WHEN bcol.CHARGEOFFDATE IS NULL THEN bcol.REMAININGPRINCIPAL
            ELSE bcol.PRINCIPALBALANCEATCHARGEOFF - COALESCE(bcol.RECOVERIESPAIDTODATE, 0)
        END AS PRINCIPALREMAININGATFILING
    FROM base_ftfcu_allocated_loans bcol
    INNER JOIN bankruptcy_data_filtered bd
        ON bcol.PAYOFFUID = bd.PAYOFFUID
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY tdh
        ON bcol.PAYOFFUID = tdh.PAYOFFUID
        AND tdh.ASOFDATE <= bd.FILING_DATE
    WHERE bd.FILING_DATE IS NOT NULL
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY bcol.PAYOFFUID
        ORDER BY tdh.ASOFDATE DESC
    ) = 1
)
--TODO: OPTIMIZE THIS POPULATION
,fraud_data_filtered AS (
    -- OPTIMIZATION: Pre-filter fraud data to target population
    SELECT fsdl.*
    FROM development._tin.fraud_scra_decease_lookup fsdl
    INNER JOIN base_ftfcu_allocated_loans bcol
        ON upper(bcol.PAYOFFUID) = upper(fsdl.payoffuid)
)
-- Final optimized query with pre-filtered data
SELECT DISTINCT
    m_pii.first_name as FIRSTNAME,
    m_pii.last_name as LASTNAME,
    m_pii.SSN,
    m_pii.ADDRESS_1 as STREETADDRESS1,
    m_pii.ADDRESS_2 as STREETADDRESS2,
    m_pii.CITY,
    m_pii.STATE,
    m_pii.ZIP_CODE as ZIPCODE,
    m_pii.DATE_OF_BIRTH,
    m_pii.EMAIL,
    m_pii.PHONE_NUMBER as PHONENUMBER,
    A.PORTFOLIONAME,
    A.LOANID,
    (A.PRINCIPALBALANCEATCHARGEOFF + A.INTERESTBALANCEATCHARGEOFF
     - A.RECOVERIESPAIDTODATE - COALESCE(COPA.CHARGED_OFF_PRINCIPAL_ADJUSTMENT, 0)
     - COALESCE(A.TOTALPRINCIPALWAIVED, 0)) AS UNPAIDBALANCEDUE,
    A.CHARGEOFFDATE,
    A.PRINCIPALBALANCEATCHARGEOFF,
    A.RECOVERIESPAIDTODATE,
    A.INTERESTBALANCEATCHARGEOFF,
    COPA.CHARGED_OFF_PRINCIPAL_ADJUSTMENT,
    A.INTERESTPAIDTODATE,
    A.PRINCIPALPAIDTODATE,
    A.LASTPAYMENTDATE,
    A.LASTPAYMENTAMOUNT,
    COALESCE(DD.DATEOFFIRSTDELINQUENCY, DATEADD(DAY, -90, A.CHARGEOFFDATE)) AS DATEOFFIRSTDELINQUENCY,
    COALESCE(DD.MOST_RECENT_DELINQUENCY_DATE, DATEADD(DAY, -90, A.CHARGEOFFDATE)) AS DATEOFMOSTRECENTDELINQUENCY,
    B.PETITION_STATUS AS BANKRUPTCY_STATUS,
    B.CASE_NUMBER,
    B.BANKRUPTCY_CHAPTER AS BANKRUPTCYCHAPTER,
    /*COALESCE(B.ATTORNEY_NAME, B.FIRM_NAME,
        CASE WHEN B.BANKRUPTCY_CHAPTER IS NOT NULL OR B.FILING_DATE IS NOT NULL
                  OR B.CASE_NUMBER IS NOT NULL OR B.PETITION_STATUS IS NOT NULL
             THEN m_pii.first_name || ' ' || m_pii.last_name
        END) AS NAMEOFFILINGPARTY,*/
    B.FILING_DATE AS BANKRUPTCYFILEDATE,
    CASE WHEN B.BANKRUPTCY_CHAPTER IS NOT NULL OR B.FILING_DATE IS NOT NULL
              OR B.CASE_NUMBER IS NOT NULL OR B.PETITION_STATUS IS NOT NULL
         THEN m_pii.FIRST_NAME || ' ' || m_pii.LAST_NAME
    END AS BANKRUPTCYDEBTOR,
    BPR.PRINCIPALREMAININGATFILING,
    PH.PAYMENTSAMOUNTAFTERPOCCOMPLETEDDATE,
    PH.PAYMENTSAFTERPOCCOMPLETEDDATE,
    --B.POC_REQUIRED,
    B.PROOF_OF_CLAIM_DEADLINE_DATE AS POC_DEADLINE_DATE,
    B.PROOF_OF_CLAIM_FILED_DATE AS POC_COMPLETED_DATE,
    --B.DISCHARGE_DATE,
    A.REASONFORDELINQUENCY AS CHARGEOFFREASON,
    /*B.SUSPEND_PHONE,
    B.SUSPEND_TEXT,
    B.SUSPEND_EMAIL,
    B.SUSPEND_LETTER,*/
    -- Core loan details
    A.ORIGINATIONDATE,
    A.INDIRECT_PURCHASEDATE,
    A.MATURITYDATE,
    A.LOANAMOUNT,
    A.TERM,
    A.INTERESTRATE,
    A.APR,
    A.EMPLOYMENTSTATUS,
    A.HOUSINGINFORMATION,
    A.ANNUALINCOME,
    A.BUREAUFICOSCORE,
    A.NDI,
    A.DTI,
    A.APPMOSSINCEDEROGPUBREC,
    A.FIRSTSCHEDULEDPAYMENTDATE,
    A.PAYMENTFREQUENCY,
    A.PAYMENTANNIVERSARYDATE,
    A.REGULARPAYMENTAMOUNT,
    A.TOTALPRINCIPALWAIVED,
    A.SECONDARY_BUYER,
    A.SECONDARY_SELLER,
    A.SECONDARY_PURCHASEDATE,
    A.SECONDARY_SOLDDATE,
    A.MLAFLAG,
    A.REFRESHEDFICOSCORE,
    A.REFRESHEDFICOSCOREDATE,
    A.CURRENTMATURITYDATE,
    A.LASTCOLLECTIONSCONTACTDATE,
    A.REASONFORDELINQUENCY,
    A.MODFLAG,
    A.PREVIOUSMODIFICATION,
    A.MODREQUESTDATE,
    A.STATUSPRIORTOMODIFICATION,
    A.LOANBALANCEATMODIFICATION,
    A.MODREASON,
    A.MODTYPE,
    A.MODSTARTDATE,
    A.MODENDDATE,
    A.MODPROCESSINGDATE,
    A.MODMATURITYDATE,
    A.MODINTERESTRATE,
    A.MODPAYMENTAMOUNT,
    A.NUMBERPAYMENTSDEFERRED,
    A.PAYMENTFORBEARANCEAMOUNT,
    A.BALLOONPAYMENT,
    A.MODTERMEXTENSION,
    A.SCRASTARTDATE,
    A.SCRAENDDATE,
    A.CPDFLAG,
    A.CPDPROCESSINGDATE,
    A.CPDANNIVERSARYDAY,
    A.INSURANCEFLAG,
    A.INSURANCESTARTDATE,
    A.INSURANCEENDDATE,
    A.LOAN_INTENT,
    -- Flags and indicators
    COALESCE(FD.IS_DECEASED, FALSE) AS DECEASED_INDICATOR,
    COALESCE(FD.is_fraud, FALSE) AS FRAUD_INDICATOR,
    CASE
        WHEN A.SCRAFLAG = 'Y' THEN 'Y'
        WHEN FD.is_scra = TRUE THEN 'Y'
        ELSE 'N'
    END as SCRAFLAG,
    A.PLACEMENT_STATUS AS LOAN_CURRENT_PLACEMENT,
    A.PLACEMENT_STATUS_STARTDATE,
    CASE WHEN A.LASTPAYMENTDATE IS NULL THEN TRUE ELSE FALSE END AS FIRST_PAYMENT_DEFAULT_INDICATOR,
    SIFS.SETTLEMENTSTATUS AS DEBT_SETTLEMENT_STATUS,
    SIFS.SETTLEMENT_START_DATE AS DEBT_SETTLEMENT_START_DATE,
    SIFS.SETTLEMENTAGREEMENTAMOUNT AS APPROVED_SETTLEMENT_AMOUNT,
    SIFS.DEBT_SETTLEMENT_PAYMENT_TERMS,
    --SIFS.DEBT_SETTLEMENT_PAYMENTS_EXPECTED,
    SIFS.SETTLEMENTAGREEMENTAMOUNT AS EXPECTED_PAYMENT_AMOUNT,
    SIFS.SETTLEMENT_COMPANY AS DEBT_SETTLEMENT_COMPANY,
    --SIFS.DEBT_SETTLEMENT_CONTACTED_BY,
    --B.CEASE_AND_DESIST,
    -- Additional fields for compatibility
    vl.loan_closed_date,
    lower(vl.lead_guid) as lead_guid,
    vl.loan_id as LP_loan_ID,
    -- Settlement tracking fields from DI-928 enhancements
    SIFS.SETTLEMENT_PORTFOLIOS,
   SIFS.SETTLEMENT_SETUP_PORTFOLIO_DATE
FROM base_ftfcu_allocated_loans A
/*INNER JOIN loan_settings_filtered LSF
    ON A.PAYOFFUID = LOWER(LSF.LEAD_GUID)*/
LEFT JOIN bankruptcy_data_filtered B
    ON A.PAYOFFUID = B.PAYOFFUID
LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_CLS_LOAN_ACCOUNT_CURRENT COPA
    ON LOWER(COPA.LEAD_GUID) = A.PAYOFFUID
LEFT JOIN fraud_data_filtered FD
    ON A.PAYOFFUID = FD.payoffuid
LEFT JOIN business_intelligence.analytics_pii.vw_member_pii m_pii
    ON A.member_id = m_pii.member_id
    AND (m_pii.MEMBER_PII_END_DATE IS NULL OR m_pii.MEMBER_PII_START_DATE <= A.PLACEMENT_STATUS_STARTDATE)
    AND (m_pii.MEMBER_PII_END_DATE IS NULL OR m_pii.MEMBER_PII_END_DATE >= A.PLACEMENT_STATUS_STARTDATE)
LEFT JOIN delinquency_dates DD
    ON A.PAYOFFUID = DD.PAYOFFUID
LEFT JOIN payment_history PH
    ON A.PAYOFFUID = PH.PAYOFFUID
LEFT JOIN bankruptcy_principal_remaining BPR
    ON A.PAYOFFUID = BPR.PAYOFFUID
LEFT JOIN business_intelligence.analytics.vw_loan vl
    ON upper(A.LOANID) = upper(vl.legacy_loan_id)
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_DEBT_SETTLEMENT SIFS
    ON vl.LOAN_ID::VARCHAR = SIFS.LOAN_ID::VARCHAR
WHERE 1=1
QUALIFY ROW_NUMBER() OVER (PARTITION BY A.PAYOFFUID ORDER BY m_pii.SSN DESC NULLS LAST) = 1
ORDER BY A.CHARGEOFFDATE DESC;
CREATE OR REPLACE TABLE BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION
COPY GRANTS AS
WITH base_query AS (
    SELECT vl.LOAN_ID,
           vl.MEMBER_ID,
           DATE(A.PLACEMENT_STATUS_STARTDATE) AS PLACEMENT_STATUS_STARTDATE,
           A.PLACEMENT_STATUS,
           A.LOANID, LOWER(A.PAYOFFUID) AS PAYOFFUID
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE A
    LEFT JOIN business_intelligence.analytics.vw_loan vl
    ON LOWER(vl.LEAD_GUID) = A.PAYOFFUID
    WHERE 1=1
        -- For FTFCU allocated loans
        AND A.PLACEMENT_STATUS = 'Placed - First Tech Credit Union')
,base_ftfcu_allocated_loans AS (
    SELECT bq.*,
           A.* EXCLUDE (payoffuid, PLACEMENT_STATUS, LOANID, PLACEMENT_STATUS_STARTDATE)
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY A
    inner JOIN base_query bq
    ON bq.PAYOFFUID = A.PAYOFFUID
    and bq.PLACEMENT_STATUS_STARTDATE <= A.ASOFDATE
    AND A.CHARGEOFFDATE IS NOT NULL
    QUALIFY ROW_NUMBER() OVER (PARTITION BY bq.PAYOFFUID ORDER BY A.ASOFDATE DESC) = 1)
,bankruptcy_data_filtered AS (
    SELECT vb.*, vl.PAYOFFUID
    -- OPTIMIZATION: Pre-filter bankruptcy data to target population only
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_BANKRUPTCY vb
    INNER JOIN base_ftfcu_allocated_loans vl
        ON vb.LOAN_ID::VARCHAR = vl.LOAN_ID::VARCHAR
    WHERE ((PETITION_STATUS = 'Discharged'
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE)
    OR (PROCESS_STATUS = 'Discharged'
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE)
    OR (vb.MOST_RECENT_BANKRUPTCY = 'Y'  -- Option B: All most recent bankruptcies
            AND vb.FILING_DATE >= vl.ORIGINATIONDATE  -- Filing on or after origination
            AND COALESCE(vb.PETITION_STATUS, '') NOT IN ('Remove Bankruptcy','Dismissed')  -- Exclude remove bankruptcy
            AND COALESCE(vb.PROCESS_STATUS, '') NOT IN ('Remove Bankruptcy','Dismissed')))
    AND FILING_DATE < PLACEMENT_STATUS_STARTDATE
    QUALIFY ROW_NUMBER() OVER (PARTITION BY vl.PAYOFFUID ORDER BY vb.LAST_UPDATED_DATE_PT DESC) = 1)
,delinquency_dates AS (
    -- OPTIMIZATION: Only calculate delinquency dates for target loans
    SELECT
        MLTDH.PAYOFFUID,
        MIN(MLTDH.ASOFDATE) AS DATEOFFIRSTDELINQUENCY,
        MAX(CASE WHEN MLTDH.DAYSPASTDUE = 30 THEN MLTDH.ASOFDATE END) AS MOST_RECENT_DELINQUENCY_DATE
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY MLTDH
    INNER JOIN base_ftfcu_allocated_loans bcol
        ON MLTDH.PAYOFFUID = bcol.PAYOFFUID
        AND MLTDH.ASOFDATE <= bcol.PLACEMENT_STATUS_STARTDATE
    WHERE MLTDH.DAYSPASTDUE >= 30
    GROUP BY MLTDH.PAYOFFUID
)
,payment_history AS (
    -- OPTIMIZATION: Pre-filter payment transactions to target loans only
    SELECT
        LOWER(bcol.PAYOFFUID) AS PAYOFFUID,
        SUM(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
            THEN pt.TRANSACTION_AMOUNT ELSE 0
        END) as TOTALPAYMENTTRANSACTIONSAMOUNT,
        COUNT(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
            THEN 1
        END) as NUMBEROFPAYMENTTRANSACTIONS,
        COUNT(CASE WHEN pt.is_REVERSED OR pt.is_rejected THEN 1 END) as NUMBEROFPAYMENTSREVERSEDORREJECTED,
        SUM(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
                 AND pt.TRANSACTION_DATE >= COALESCE(bd.PROOF_OF_CLAIM_FILED_DATE, '2099-01-01'::DATE)
            THEN pt.TRANSACTION_AMOUNT ELSE 0
        END) AS PAYMENTSAMOUNTAFTERPOCCOMPLETEDDATE,
        COUNT(CASE
            WHEN pt.IS_SETTLED AND NOT pt.is_REVERSED AND NOT pt.is_REJECTED
                 AND pt.TRANSACTION_DATE >= COALESCE(bd.PROOF_OF_CLAIM_FILED_DATE, '2099-01-01'::DATE)
            THEN 1
        END) AS PAYMENTSAFTERPOCCOMPLETEDDATE
    FROM base_ftfcu_allocated_loans bcol
    LEFT JOIN bankruptcy_data_filtered bd
        ON LOWER(bcol.PAYOFFUID) = bd.PAYOFFUID
    LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LP_PAYMENT_TRANSACTION pt
        ON pt.LOAN_ID::text = bcol.LOAN_ID::text
    WHERE pt.TRANSACTION_DATE < bcol.PLACEMENT_STATUS_STARTDATE
    GROUP BY bcol.PAYOFFUID
)
,bankruptcy_principal_remaining AS (
    -- OPTIMIZATION: Only calculate for loans with bankruptcy data
    SELECT
        bcol.PAYOFFUID,
        bd.FILING_DATE AS BANKRUPTCYFILEDATE,
        CASE
            WHEN bcol.CHARGEOFFDATE IS NULL THEN bcol.REMAININGPRINCIPAL
            ELSE bcol.PRINCIPALBALANCEATCHARGEOFF - COALESCE(bcol.RECOVERIESPAIDTODATE, 0)
        END AS PRINCIPALREMAININGATFILING
    FROM base_ftfcu_allocated_loans bcol
    INNER JOIN bankruptcy_data_filtered bd
        ON bcol.PAYOFFUID = bd.PAYOFFUID
    INNER JOIN BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE_DAILY_HISTORY tdh
        ON bcol.PAYOFFUID = tdh.PAYOFFUID
        AND tdh.ASOFDATE <= bd.FILING_DATE
    WHERE bd.FILING_DATE IS NOT NULL
    QUALIFY ROW_NUMBER() OVER (
        PARTITION BY bcol.PAYOFFUID
        ORDER BY tdh.ASOFDATE DESC
    ) = 1
)
--TODO: OPTIMIZE THIS POPULATION
,fraud_data_filtered AS (
    -- OPTIMIZATION: Pre-filter fraud data to target population
    SELECT fsdl.*
    FROM development._tin.fraud_scra_decease_lookup fsdl
    INNER JOIN base_ftfcu_allocated_loans bcol
        ON upper(bcol.PAYOFFUID) = upper(fsdl.payoffuid)
)
-- Final optimized query with pre-filtered data
SELECT DISTINCT
    m_pii.first_name as FIRSTNAME,
    m_pii.last_name as LASTNAME,
    m_pii.SSN,
    m_pii.ADDRESS_1 as STREETADDRESS1,
    m_pii.ADDRESS_2 as STREETADDRESS2,
    m_pii.CITY,
    m_pii.STATE,
    m_pii.ZIP_CODE as ZIPCODE,
    m_pii.DATE_OF_BIRTH,
    m_pii.EMAIL,
    m_pii.PHONE_NUMBER as PHONENUMBER,
    A.PORTFOLIONAME,
    A.LOANID,
    (A.PRINCIPALBALANCEATCHARGEOFF + A.INTERESTBALANCEATCHARGEOFF
     - A.RECOVERIESPAIDTODATE - COALESCE(COPA.CHARGED_OFF_PRINCIPAL_ADJUSTMENT, 0)
     - COALESCE(A.TOTALPRINCIPALWAIVED, 0)) AS UNPAIDBALANCEDUE,
    A.CHARGEOFFDATE,
    A.PRINCIPALBALANCEATCHARGEOFF,
    A.RECOVERIESPAIDTODATE,
    A.INTERESTBALANCEATCHARGEOFF,
    COPA.CHARGED_OFF_PRINCIPAL_ADJUSTMENT,
    A.INTERESTPAIDTODATE,
    A.PRINCIPALPAIDTODATE,
    A.LASTPAYMENTDATE,
    A.LASTPAYMENTAMOUNT,
    COALESCE(DD.DATEOFFIRSTDELINQUENCY, DATEADD(DAY, -90, A.CHARGEOFFDATE)) AS DATEOFFIRSTDELINQUENCY,
    COALESCE(DD.MOST_RECENT_DELINQUENCY_DATE, DATEADD(DAY, -90, A.CHARGEOFFDATE)) AS DATEOFMOSTRECENTDELINQUENCY,
    B.PETITION_STATUS AS BANKRUPTCY_STATUS,
    B.CASE_NUMBER,
    B.BANKRUPTCY_CHAPTER AS BANKRUPTCYCHAPTER,
    /*COALESCE(B.ATTORNEY_NAME, B.FIRM_NAME,
        CASE WHEN B.BANKRUPTCY_CHAPTER IS NOT NULL OR B.FILING_DATE IS NOT NULL
                  OR B.CASE_NUMBER IS NOT NULL OR B.PETITION_STATUS IS NOT NULL
             THEN m_pii.first_name || ' ' || m_pii.last_name
        END) AS NAMEOFFILINGPARTY,*/
    B.FILING_DATE AS BANKRUPTCYFILEDATE,
    CASE WHEN B.BANKRUPTCY_CHAPTER IS NOT NULL OR B.FILING_DATE IS NOT NULL
              OR B.CASE_NUMBER IS NOT NULL OR B.PETITION_STATUS IS NOT NULL
         THEN m_pii.FIRST_NAME || ' ' || m_pii.LAST_NAME
    END AS BANKRUPTCYDEBTOR,
    BPR.PRINCIPALREMAININGATFILING,
    PH.PAYMENTSAMOUNTAFTERPOCCOMPLETEDDATE,
    PH.PAYMENTSAFTERPOCCOMPLETEDDATE,
    --B.POC_REQUIRED,
    B.PROOF_OF_CLAIM_DEADLINE_DATE AS POC_DEADLINE_DATE,
    B.PROOF_OF_CLAIM_FILED_DATE AS POC_COMPLETED_DATE,
    --B.DISCHARGE_DATE,
    A.REASONFORDELINQUENCY AS CHARGEOFFREASON,
    /*B.SUSPEND_PHONE,
    B.SUSPEND_TEXT,
    B.SUSPEND_EMAIL,
    B.SUSPEND_LETTER,*/
    -- Core loan details
    A.ORIGINATIONDATE,
    A.INDIRECT_PURCHASEDATE,
    A.MATURITYDATE,
    A.LOANAMOUNT,
    A.TERM,
    A.INTERESTRATE,
    A.APR,
    A.EMPLOYMENTSTATUS,
    A.HOUSINGINFORMATION,
    A.ANNUALINCOME,
    A.BUREAUFICOSCORE,
    A.NDI,
    A.DTI,
    A.APPMOSSINCEDEROGPUBREC,
    A.FIRSTSCHEDULEDPAYMENTDATE,
    A.PAYMENTFREQUENCY,
    A.PAYMENTANNIVERSARYDATE,
    A.REGULARPAYMENTAMOUNT,
    A.TOTALPRINCIPALWAIVED,
    A.SECONDARY_BUYER,
    A.SECONDARY_SELLER,
    A.SECONDARY_PURCHASEDATE,
    A.SECONDARY_SOLDDATE,
    A.MLAFLAG,
    A.REFRESHEDFICOSCORE,
    A.REFRESHEDFICOSCOREDATE,
    A.CURRENTMATURITYDATE,
    A.LASTCOLLECTIONSCONTACTDATE,
    A.REASONFORDELINQUENCY,
    A.MODFLAG,
    A.PREVIOUSMODIFICATION,
    A.MODREQUESTDATE,
    A.STATUSPRIORTOMODIFICATION,
    A.LOANBALANCEATMODIFICATION,
    A.MODREASON,
    A.MODTYPE,
    A.MODSTARTDATE,
    A.MODENDDATE,
    A.MODPROCESSINGDATE,
    A.MODMATURITYDATE,
    A.MODINTERESTRATE,
    A.MODPAYMENTAMOUNT,
    A.NUMBERPAYMENTSDEFERRED,
    A.PAYMENTFORBEARANCEAMOUNT,
    A.BALLOONPAYMENT,
    A.MODTERMEXTENSION,
    A.SCRASTARTDATE,
    A.SCRAENDDATE,
    A.CPDFLAG,
    A.CPDPROCESSINGDATE,
    A.CPDANNIVERSARYDAY,
    A.INSURANCEFLAG,
    A.INSURANCESTARTDATE,
    A.INSURANCEENDDATE,
    A.LOAN_INTENT,
    -- Flags and indicators
    COALESCE(FD.IS_DECEASED, FALSE) AS DECEASED_INDICATOR,
    COALESCE(FD.is_fraud, FALSE) AS FRAUD_INDICATOR,
    CASE
        WHEN A.SCRAFLAG = 'Y' THEN 'Y'
        WHEN FD.is_scra = TRUE THEN 'Y'
        ELSE 'N'
    END as SCRAFLAG,
    A.PLACEMENT_STATUS AS LOAN_CURRENT_PLACEMENT,
    A.PLACEMENT_STATUS_STARTDATE,
    CASE WHEN A.LASTPAYMENTDATE IS NULL THEN TRUE ELSE FALSE END AS FIRST_PAYMENT_DEFAULT_INDICATOR,
    SIFS.SETTLEMENTSTATUS AS DEBT_SETTLEMENT_STATUS,
    SIFS.SETTLEMENT_START_DATE AS DEBT_SETTLEMENT_START_DATE,
    SIFS.SETTLEMENTAGREEMENTAMOUNT AS APPROVED_SETTLEMENT_AMOUNT,
    SIFS.DEBT_SETTLEMENT_PAYMENT_TERMS,
    --SIFS.DEBT_SETTLEMENT_PAYMENTS_EXPECTED,
    SIFS.SETTLEMENTAGREEMENTAMOUNT AS EXPECTED_PAYMENT_AMOUNT,
    SIFS.SETTLEMENT_COMPANY AS DEBT_SETTLEMENT_COMPANY,
    --SIFS.DEBT_SETTLEMENT_CONTACTED_BY,
    --B.CEASE_AND_DESIST,
    -- Additional fields for compatibility
    vl.loan_closed_date,
    lower(vl.lead_guid) as lead_guid,
    vl.loan_id as LP_loan_ID,
    -- Settlement tracking fields from DI-928 enhancements
    SIFS.SETTLEMENT_PORTFOLIOS,
   SIFS.SETTLEMENT_SETUP_PORTFOLIO_DATE
FROM base_ftfcu_allocated_loans A
/*INNER JOIN loan_settings_filtered LSF
    ON A.PAYOFFUID = LOWER(LSF.LEAD_GUID)*/
LEFT JOIN bankruptcy_data_filtered B
    ON A.PAYOFFUID = B.PAYOFFUID
LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_CLS_LOAN_ACCOUNT_CURRENT COPA
    ON LOWER(COPA.LEAD_GUID) = A.PAYOFFUID
LEFT JOIN fraud_data_filtered FD
    ON A.PAYOFFUID = FD.payoffuid
LEFT JOIN business_intelligence.analytics_pii.vw_member_pii m_pii
    ON A.member_id = m_pii.member_id
    AND (m_pii.MEMBER_PII_END_DATE IS NULL OR m_pii.MEMBER_PII_START_DATE <= A.PLACEMENT_STATUS_STARTDATE)
    AND (m_pii.MEMBER_PII_END_DATE IS NULL OR m_pii.MEMBER_PII_END_DATE >= A.PLACEMENT_STATUS_STARTDATE)
LEFT JOIN delinquency_dates DD
    ON A.PAYOFFUID = DD.PAYOFFUID
LEFT JOIN payment_history PH
    ON A.PAYOFFUID = PH.PAYOFFUID
LEFT JOIN bankruptcy_principal_remaining BPR
    ON A.PAYOFFUID = BPR.PAYOFFUID
LEFT JOIN business_intelligence.analytics.vw_loan vl
    ON upper(A.LOANID) = upper(vl.legacy_loan_id)
LEFT JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_DEBT_SETTLEMENT SIFS
    ON vl.LOAN_ID::VARCHAR = SIFS.LOAN_ID::VARCHAR
WHERE 1=1
QUALIFY ROW_NUMBER() OVER (PARTITION BY A.PAYOFFUID ORDER BY m_pii.SSN DESC NULLS LAST) = 1
ORDER BY A.CHARGEOFFDATE DESC;

-- ===========================
-- VALIDATION QUERIES
-- ===========================

SELECT * FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION;

-- QC: Check for duplicates
SELECT COUNT(*) AS ROW_COUNT, LOANID
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION
GROUP BY LOANID
HAVING COUNT(*) > 1
ORDER BY 1 DESC;

-- QC: Count summary
SELECT
    COUNT(*) AS ROW_COUNT,
    COUNT(DISTINCT LOANID) AS DISTINCT_LOANID_COUNT,
    COUNT(DISTINCT lead_guid) AS DISTINCT_LEAD_GUID_COUNT,
    MIN(CHARGEOFFDATE) as min_chargeoff_date,
    MAX(CHARGEOFFDATE) as max_chargeoff_date
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION;

SELECT * FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION
WHERE LOANID in (SELECT LOANID
FROM BUSINESS_INTELLIGENCE_DEV.CRON_STORE.CHARGE_OFF_FTFCU_ALLOCATED_POPULATION
GROUP BY LOANID
HAVING COUNT(*) > 1
ORDER BY 1 DESC)
order by LOANID, ssn;