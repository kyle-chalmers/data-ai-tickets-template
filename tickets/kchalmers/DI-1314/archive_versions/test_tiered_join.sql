-- Test tiered join logic with Fivetran SFMC data

USE WAREHOUSE BUSINESS_INTELLIGENCE_LARGE;

SET START_DATE = '2023-10-01';
SET END_DATE = '2025-08-31';

WITH crb_member_emails AS (
    SELECT
        vl.MEMBER_ID,
        mlt.PAYOFFUID,
        vl.LOAN_ID,
        vl.APPLICATION_ID::VARCHAR AS APPLICATION_ID,
        mlt.PORTFOLIOID,
        mlt.PORTFOLIONAME,
        pii.FIRST_NAME,
        pii.LAST_NAME,
        pii.EMAIL
    FROM BUSINESS_INTELLIGENCE.DATA_STORE.MVW_LOAN_TAPE mlt
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN vl
        ON mlt.PAYOFFUID = vl.LEAD_GUID
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII pii
        ON vl.MEMBER_ID = pii.MEMBER_ID
        AND pii.MEMBER_PII_END_DATE IS NULL
    WHERE mlt.PORTFOLIOID IN ('32', '34', '54', '56')
),
UNSUBSCRIBED_LIST AS (
    SELECT DISTINCT
        A.SUBSCRIBER_KEY,
        A.CREATED_DATE,
        C.EMAIL_ADDRESS,
        B.LOAN_ID::VARCHAR AS APPLICATION_ID,
        D.DERIVED_PAYOFFUID
    FROM FIVETRAN.SALESFORCE_MARKETING_CLOUD.LIST_SUBSCRIBER A
    LEFT JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_CUSTOMER_CURRENT B
        ON A.SUBSCRIBER_KEY = B.CUSTOMER_ID::VARCHAR
        AND B.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LOS_SCHEMA()
    INNER JOIN FIVETRAN.SALESFORCE_MARKETING_CLOUD.SUBSCRIBER C
        ON A.SUBSCRIBER_KEY = C.SUBSCRIBER_KEY
    LEFT JOIN (
        SELECT DISTINCT SUBSCRIBER_KEY, DERIVED_PAYOFFUID
        FROM BUSINESS_INTELLIGENCE.CRON_STORE.DSH_EMAIL_MONITORING_EVENTS
    ) D
        ON A.SUBSCRIBER_KEY = D.SUBSCRIBER_KEY
    WHERE A.STATUS = 'Unsubscribed'
        AND LIST_ID = 143
        AND A.CREATED_DATE BETWEEN $START_DATE AND $END_DATE
)
SELECT COUNT(*) AS TOTAL_MATCHES
FROM crb_member_emails B
INNER JOIN UNSUBSCRIBED_LIST A
    ON (
        -- Tier 1: Match on PAYOFFUID
        (A.DERIVED_PAYOFFUID IS NOT NULL AND B.PAYOFFUID IS NOT NULL AND A.DERIVED_PAYOFFUID = B.PAYOFFUID)
        OR
        -- Tier 2: Match on APPLICATION_ID if PAYOFFUID didn't match
        ((A.DERIVED_PAYOFFUID IS NULL OR B.PAYOFFUID IS NULL OR A.DERIVED_PAYOFFUID != B.PAYOFFUID)
         AND (A.APPLICATION_ID IS NOT NULL AND B.APPLICATION_ID IS NOT NULL AND A.APPLICATION_ID = B.APPLICATION_ID))
        OR
        -- Tier 3: Match on EMAIL if neither matched
        (((A.DERIVED_PAYOFFUID IS NULL OR B.PAYOFFUID IS NULL OR A.DERIVED_PAYOFFUID != B.PAYOFFUID)
          AND (A.APPLICATION_ID IS NULL OR B.APPLICATION_ID IS NULL OR A.APPLICATION_ID != B.APPLICATION_ID))
         AND TRIM(LOWER(A.EMAIL_ADDRESS)) = TRIM(LOWER(B.EMAIL)))
    );
