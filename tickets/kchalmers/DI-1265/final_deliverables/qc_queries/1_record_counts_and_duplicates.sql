/* QC VALIDATION - Record Counts and Duplicate Checks
 * Validates the audience list for data quality issues
 */

-- 1.1: Overall record counts
WITH FINAL_QUERY AS (
    SELECT DISTINCT
        C.EMAIL,
        E.CUSTOMER_ID AS LOS_CUSTOMER_ID,
        A.MEMBER_ID AS LMS_CUSTOMER_ID,
        A.LEAD_GUID AS PAYOFFUID,
        B.LOAN_SUB_STATUS_TEXT AS LP_LOAN_STATUS,
        A.APPLICATION_ID,
        C.FIRST_NAME,
        C.LAST_NAME,
        C.STATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN A
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_STATUS_ARCHIVE_CURRENT B
        ON A.LOAN_ID::VARCHAR = B.LOAN_ID::VARCHAR
        AND B.DATE = CURRENT_DATE
        AND B.DAYS_PAST_DUE < 3
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII C
        ON A.MEMBER_ID = C.MEMBER_ID
        AND C.MEMBER_PII_END_DATE IS NULL
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_CUSTOMER_CURRENT E
        ON A.APPLICATION_ID::VARCHAR = E.LOAN_ID::VARCHAR
        AND E.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LOS_SCHEMA()
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_CONTACT_RULES F
        ON A.LOAN_ID::VARCHAR = F.LOAN_ID::VARCHAR
        AND F.CEASE_AND_DESIST = FALSE
        AND F.SUPPRESS_EMAIL = FALSE
    WHERE 1=1
        AND A.LOAN_CLOSED_DATE IS NULL
        AND A.CHARGE_OFF_DATE IS NULL
)
SELECT
    COUNT(*) AS ROW_COUNT,
    COUNT(DISTINCT PAYOFFUID) AS DISTINCT_LOAN_COUNT,
    COUNT(DISTINCT LOS_CUSTOMER_ID) AS DISTINCT_LOS_CUSTOMERS,
    COUNT(DISTINCT LMS_CUSTOMER_ID) AS DISTINCT_LMS_CUSTOMERS,
    COUNT(DISTINCT APPLICATION_ID) AS DISTINCT_APPLICATION_IDS,
    COUNT(DISTINCT EMAIL) AS DISTINCT_EMAIL_COUNT
FROM FINAL_QUERY;

-- 1.2: Check for duplicate PAYOFFUIDs
WITH FINAL_QUERY AS (
    SELECT DISTINCT
        C.EMAIL,
        E.CUSTOMER_ID AS LOS_CUSTOMER_ID,
        A.MEMBER_ID AS LMS_CUSTOMER_ID,
        A.LEAD_GUID AS PAYOFFUID,
        B.LOAN_SUB_STATUS_TEXT AS LP_LOAN_STATUS,
        A.APPLICATION_ID,
        C.FIRST_NAME,
        C.LAST_NAME,
        C.STATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN A
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_STATUS_ARCHIVE_CURRENT B
        ON A.LOAN_ID::VARCHAR = B.LOAN_ID::VARCHAR
        AND B.DATE = CURRENT_DATE
        AND B.DAYS_PAST_DUE < 3
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII C
        ON A.MEMBER_ID = C.MEMBER_ID
        AND C.MEMBER_PII_END_DATE IS NULL
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_CUSTOMER_CURRENT E
        ON A.APPLICATION_ID::VARCHAR = E.LOAN_ID::VARCHAR
        AND E.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LOS_SCHEMA()
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_CONTACT_RULES F
        ON A.LOAN_ID::VARCHAR = F.LOAN_ID::VARCHAR
        AND F.CEASE_AND_DESIST = FALSE
        AND F.SUPPRESS_EMAIL = FALSE
    WHERE 1=1
        AND A.LOAN_CLOSED_DATE IS NULL
        AND A.CHARGE_OFF_DATE IS NULL
)
SELECT COUNT(*) AS ROW_COUNT,
       PAYOFFUID
FROM FINAL_QUERY
GROUP BY ALL
HAVING ROW_COUNT > 1
ORDER BY 1 DESC;

-- 1.3: Check for duplicate Emails
WITH FINAL_QUERY AS (
    SELECT DISTINCT
        C.EMAIL,
        E.CUSTOMER_ID AS LOS_CUSTOMER_ID,
        A.MEMBER_ID AS LMS_CUSTOMER_ID,
        A.LEAD_GUID AS PAYOFFUID,
        B.LOAN_SUB_STATUS_TEXT AS LP_LOAN_STATUS,
        A.APPLICATION_ID,
        C.FIRST_NAME,
        C.LAST_NAME,
        C.STATE
    FROM BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN A
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_STATUS_ARCHIVE_CURRENT B
        ON A.LOAN_ID::VARCHAR = B.LOAN_ID::VARCHAR
        AND B.DATE = CURRENT_DATE
        AND B.DAYS_PAST_DUE < 3
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS_PII.VW_MEMBER_PII C
        ON A.MEMBER_ID = C.MEMBER_ID
        AND C.MEMBER_PII_END_DATE IS NULL
    INNER JOIN BUSINESS_INTELLIGENCE.BRIDGE.VW_LOAN_CUSTOMER_CURRENT E
        ON A.APPLICATION_ID::VARCHAR = E.LOAN_ID::VARCHAR
        AND E.SCHEMA_NAME = BUSINESS_INTELLIGENCE.CONFIG.LOS_SCHEMA()
    INNER JOIN BUSINESS_INTELLIGENCE.ANALYTICS.VW_LOAN_CONTACT_RULES F
        ON A.LOAN_ID::VARCHAR = F.LOAN_ID::VARCHAR
        AND F.CEASE_AND_DESIST = FALSE
        AND F.SUPPRESS_EMAIL = FALSE
    WHERE 1=1
        AND A.LOAN_CLOSED_DATE IS NULL
        AND A.CHARGE_OFF_DATE IS NULL
)
SELECT COUNT(*) AS ROW_COUNT,
       EMAIL
FROM FINAL_QUERY
GROUP BY ALL
HAVING ROW_COUNT > 1
ORDER BY 1 DESC;